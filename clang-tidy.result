Enabled checks:
    clang-analyzer-apiModeling.StdCLibraryFunctions
    clang-analyzer-apiModeling.TrustNonnull
    clang-analyzer-apiModeling.google.GTest
    clang-analyzer-apiModeling.llvm.CastValue
    clang-analyzer-apiModeling.llvm.ReturnValue
    clang-analyzer-core.CallAndMessage
    clang-analyzer-core.DivideZero
    clang-analyzer-core.DynamicTypePropagation
    clang-analyzer-core.NonNullParamChecker
    clang-analyzer-core.NonnilStringConstants
    clang-analyzer-core.NullDereference
    clang-analyzer-core.StackAddrEscapeBase
    clang-analyzer-core.StackAddressEscape
    clang-analyzer-core.UndefinedBinaryOperatorResult
    clang-analyzer-core.VLASize
    clang-analyzer-core.builtin.BuiltinFunctions
    clang-analyzer-core.builtin.NoReturnFunctions
    clang-analyzer-core.uninitialized.ArraySubscript
    clang-analyzer-core.uninitialized.Assign
    clang-analyzer-core.uninitialized.Branch
    clang-analyzer-core.uninitialized.CapturedBlockVariable
    clang-analyzer-core.uninitialized.UndefReturn
    clang-analyzer-cplusplus.InnerPointer
    clang-analyzer-cplusplus.Move
    clang-analyzer-cplusplus.NewDelete
    clang-analyzer-cplusplus.NewDeleteLeaks
    clang-analyzer-cplusplus.SelfAssignment
    clang-analyzer-cplusplus.SmartPtr
    clang-analyzer-deadcode.DeadStores
    clang-analyzer-nullability.NullPassedToNonnull
    clang-analyzer-nullability.NullReturnedFromNonnull
    clang-analyzer-nullability.NullabilityBase
    clang-analyzer-nullability.NullableDereferenced
    clang-analyzer-nullability.NullablePassedToNonnull
    clang-analyzer-nullability.NullableReturnedFromNonnull
    clang-analyzer-optin.cplusplus.UninitializedObject
    clang-analyzer-optin.cplusplus.VirtualCall
    clang-analyzer-optin.mpi.MPI-Checker
    clang-analyzer-optin.osx.OSObjectCStyleCast
    clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker
    clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker
    clang-analyzer-optin.performance.GCDAntipattern
    clang-analyzer-optin.performance.Padding
    clang-analyzer-optin.portability.UnixAPI
    clang-analyzer-osx.API
    clang-analyzer-osx.MIG
    clang-analyzer-osx.NSOrCFErrorDerefChecker
    clang-analyzer-osx.NumberObjectConversion
    clang-analyzer-osx.OSObjectRetainCount
    clang-analyzer-osx.ObjCProperty
    clang-analyzer-osx.SecKeychainAPI
    clang-analyzer-osx.cocoa.AtSync
    clang-analyzer-osx.cocoa.AutoreleaseWrite
    clang-analyzer-osx.cocoa.ClassRelease
    clang-analyzer-osx.cocoa.Dealloc
    clang-analyzer-osx.cocoa.IncompatibleMethodTypes
    clang-analyzer-osx.cocoa.Loops
    clang-analyzer-osx.cocoa.MissingSuperCall
    clang-analyzer-osx.cocoa.NSAutoreleasePool
    clang-analyzer-osx.cocoa.NSError
    clang-analyzer-osx.cocoa.NilArg
    clang-analyzer-osx.cocoa.NonNilReturnValue
    clang-analyzer-osx.cocoa.ObjCGenerics
    clang-analyzer-osx.cocoa.RetainCount
    clang-analyzer-osx.cocoa.RetainCountBase
    clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak
    clang-analyzer-osx.cocoa.SelfInit
    clang-analyzer-osx.cocoa.SuperDealloc
    clang-analyzer-osx.cocoa.UnusedIvars
    clang-analyzer-osx.cocoa.VariadicMethodTypes
    clang-analyzer-osx.coreFoundation.CFError
    clang-analyzer-osx.coreFoundation.CFNumber
    clang-analyzer-osx.coreFoundation.CFRetainRelease
    clang-analyzer-osx.coreFoundation.containers.OutOfBounds
    clang-analyzer-osx.coreFoundation.containers.PointerSizedValues
    clang-analyzer-security.FloatLoopCounter
    clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling
    clang-analyzer-security.insecureAPI.SecuritySyntaxChecker
    clang-analyzer-security.insecureAPI.UncheckedReturn
    clang-analyzer-security.insecureAPI.bcmp
    clang-analyzer-security.insecureAPI.bcopy
    clang-analyzer-security.insecureAPI.bzero
    clang-analyzer-security.insecureAPI.getpw
    clang-analyzer-security.insecureAPI.gets
    clang-analyzer-security.insecureAPI.mkstemp
    clang-analyzer-security.insecureAPI.mktemp
    clang-analyzer-security.insecureAPI.rand
    clang-analyzer-security.insecureAPI.strcpy
    clang-analyzer-security.insecureAPI.vfork
    clang-analyzer-unix.API
    clang-analyzer-unix.DynamicMemoryModeling
    clang-analyzer-unix.Malloc
    clang-analyzer-unix.MallocSizeof
    clang-analyzer-unix.MismatchedDeallocator
    clang-analyzer-unix.Vfork
    clang-analyzer-unix.cstring.BadSizeArg
    clang-analyzer-unix.cstring.CStringModeling
    clang-analyzer-unix.cstring.NullArg
    clang-analyzer-valist.CopyToSelf
    clang-analyzer-valist.Uninitialized
    clang-analyzer-valist.Unterminated
    clang-analyzer-valist.ValistBase

clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflow.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/cashflowvectors.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/capflooredcoupon.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/capflooredinflationcoupon.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/cashflows/capflooredinflationcoupon.cpp:74:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        setCommon(cap, floor);
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/cashflows/capflooredinflationcoupon.cpp:74:9: note: This constructor of an object of type 'CappedFlooredYoYInflationCoupon' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/cashflows/capflooredinflationcoupon.cpp:74:9: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/coupon.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/cpicouponpricer.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/cmscoupon.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/averagebmacoupon.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/couponpricer.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/duration.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/cpicoupon.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/dividend.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/digitalcoupon.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/digitalcmscoupon.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/floatingratecoupon.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/indexedcashflow.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/conundrumpricer.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/inflationcoupon.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/digitaliborcoupon.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/fixedratecoupon.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/inflationcouponpricer.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/replication.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/simplecashflow.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/currencies/africa.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/iborcoupon.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/currencies/america.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/currencies/asia.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/currencies/crypto.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/currencies/europe.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/currencies/oceania.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/currency.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/timebasket.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/yoyinflationcoupon.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/errors.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/discretizedasset.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/overnightindexedcoupon.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/event.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/amortizingbonds/amortizingcmsratebond.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/rangeaccrual.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/currencies/exchangeratemanager.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/amortizingbonds/amortizingfloatingratebond.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/amortizingbonds/amortizingfixedratebond.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/lineartsrpricer.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/cashflows/cashflows.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/averageois/arithmeticoisratehelper.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/averageois/arithmeticoisratehelper.cpp:53:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/averageois/arithmeticoisratehelper.cpp:53:9: note: This constructor of an object of type 'ArithmeticOISRateHelper' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/averageois/arithmeticoisratehelper.cpp:53:9: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/averageois/arithmeticaverageois.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/exercise.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/barrieroption/doublebarriertype.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/exchangerate.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/exchangerate.hpp:87:31: warning: 1 uninitialized field at the end of the constructor call [clang-analyzer-optin.cplusplus.UninitializedObject]
    : rate_(Null<Decimal>()) {}
                              ^
/home/zzy/Documents/Cpp/QuantLib/ql/exchangerate.hpp:78:14: note: uninitialized field 'this->type_'
        Type type_;
             ^
/home/zzy/Documents/Cpp/QuantLib/ql/exchangerate.cpp:52:22: note: Calling default constructor for 'ExchangeRate'
        ExchangeRate result;
                     ^
/home/zzy/Documents/Cpp/QuantLib/ql/exchangerate.hpp:87:31: note: 1 uninitialized field at the end of the constructor call
    : rate_(Null<Decimal>()) {}
                              ^
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/barrieroption/doublebarrieroption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/averageois/makearithmeticaverageois.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/barrieroption/quantodoublebarrieroption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/barrieroption/analyticdoublebarrierbinaryengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/averageois/averageoiscouponpricer.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/barrieroption/discretizeddoublebarrieroption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/barrieroption/analyticdoublebarrierengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/basismodels/tenoroptionletvts.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/barrieroption/wulinyongdoublebarrierengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/basismodels/tenorswaptionvts.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/barrieroption/perturbativebarrieroptionengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/callablebonds/blackcallablebondengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/callablebonds/callablebondconstantvol.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/basismodels/swaptioncfs.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/callablebonds/callablebondvolstructure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/barrieroption/vannavolgabarrierengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/catbonds/riskynotional.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/callablebonds/discretizedcallablefixedratebond.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/callablebonds/treecallablebondengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/catbonds/catbond.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/catbonds/catrisk.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/commodities/commodityindex.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/commodities/commoditycurve.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/commodities/commoditytype.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/commodities/commodityunitcost.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/commodities/commoditysettings.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/commodities/commoditycashflow.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/commodities/dateinterval.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/callablebonds/callablebond.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/catbonds/montecarlocatbondengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/commodities/commoditypricinghelpers.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/commodities/paymentterm.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/commodities/energyswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/commodities/unitofmeasure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/commodities/commodity.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/commodities/energyfuture.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/commodities/energycommodity.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/commodities/unitofmeasureconversion.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/commodities/energybasisswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/convertiblebonds/convertiblebond.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/commodities/energyvanillaswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/coupons/proxyibor.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/coupons/quantocouponpricer.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/convertiblebonds/discretizedconvertible.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/coupons/subperiodcoupons.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/commodities/unitofmeasureconversionmanager.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/coupons/swapspreadindex.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/coupons/cmsspreadcoupon.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/coupons/digitalcmsspreadcoupon.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/coupons/strippedcapflooredcoupon.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/coupons/lognormalcmsspreadpricer.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/blackcdsoptionengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/correlationstructure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/defaulttype.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/defaultprobabilitykey.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/defaultevent.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/basket.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/distribution.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/cdo.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/cdsoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/basecorrelationstructure.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bicubicsplineinterpolation.hpp:56:17: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
                calculate();
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/basecorrelationstructure.cpp:44:14: note: Calling constructor for 'BicubicSpline'
             BicubicSpline(trancheTimes_.begin(), 
             ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bicubicsplineinterpolation.hpp:171:23: note: Calling constructor for 'BicubicSplineImpl<__gnu_cxx::__normal_iterator<double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double *, std::vector<double, std::allocator<double> > >, QuantLib::Matrix>'
                  new detail::BicubicSplineImpl<I1,I2,M>(xBegin, xEnd,
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bicubicsplineinterpolation.hpp:56:17: note: This constructor of an object of type 'BicubicSplineImpl' has not returned when the virtual method was called
                calculate();
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bicubicsplineinterpolation.hpp:56:17: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:44:17: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
                calculate();
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/basecorrelationstructure.cpp:32:14: note: Calling constructor for 'BilinearInterpolation'
             BilinearInterpolation(trancheTimes_.begin(), 
             ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:80:23: note: Calling constructor for 'BilinearInterpolationImpl<__gnu_cxx::__normal_iterator<double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double *, std::vector<double, std::allocator<double> > >, QuantLib::Matrix>'
                  new detail::BilinearInterpolationImpl<I1,I2,M>(xBegin, xEnd,
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:44:17: note: This constructor of an object of type 'BilinearInterpolationImpl' has not returned when the virtual method was called
                calculate();
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:44:17: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/issuer.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/nthtodefault.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorcopula.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/gaussianlhplossmodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/integralcdoengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorgaussiancopula.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorgaussiancopula.cpp:47:13: warning: Variable 'm' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
            for (Real m = minimum; m < maximum; m += delta)
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorgaussiancopula.cpp:47:13: note: Variable 'm' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorgaussiancopula.cpp:48:17: warning: Variable 'z' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
                for (Real z = minimum; z < (y - std::sqrt(c) * m) / std::sqrt (1. - c);
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorgaussiancopula.cpp:48:17: note: Variable 'z' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorgaussiancopula.cpp:55:13: warning: Variable 'z' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
            for (Real z = minimum; z < maximum; z += delta)
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorgaussiancopula.cpp:55:13: note: Variable 'z' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorgaussiancopula.cpp:56:17: warning: Variable 'm' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
                for (Real m = minimum; m < (y - std::sqrt(1.0 - c) * z) / std::sqrt(c);
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorgaussiancopula.cpp:56:17: note: Variable 'm' with floating point type 'QuantLib::Real' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/pool.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/lossdistribution.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/integralntdengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:89:13: warning: Variable 'm' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
            for (Real m = minimum + delta/2; m < maximum; m += delta)
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:89:13: note: Variable 'm' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:90:17: warning: Variable 'z' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
                for (Real z = minimum + delta/2;
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:90:17: note: Variable 'z' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:98:13: warning: Variable 'z' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
            for (Real z = minimum + delta/2; z < maximum; z += delta)
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:98:13: note: Variable 'z' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:99:17: warning: Variable 'm' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
                for (Real m = minimum + delta/2;
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:99:17: note: Variable 'm' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:171:13: warning: Variable 'm' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
            for (Real m = minimum + delta/2; m < maximum; m += delta)
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:171:13: note: Variable 'm' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:172:17: warning: Variable 'z' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
                for (Real z = minimum + delta/2;
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:172:17: note: Variable 'z' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:180:13: warning: Variable 'z' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
            for (Real z = minimum + delta/2; z < maximum; z += delta)
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:180:13: note: Variable 'z' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:181:17: warning: Variable 'm' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
                for (Real m = minimum + delta/2;
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:181:17: note: Variable 'm' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:254:13: warning: Variable 'm' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
            for (Real m = minimum + delta/2; m < maximum; m += delta)
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:254:13: note: Variable 'm' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:255:17: warning: Variable 'z' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
                for (Real z = minimum + delta/2;
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:255:17: note: Variable 'z' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:263:13: warning: Variable 'z' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
            for (Real z = minimum + delta/2; z < maximum; z += delta)
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:263:13: note: Variable 'z' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:264:17: warning: Variable 'm' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
                for (Real m = minimum + delta/2;
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/onefactorstudentcopula.cpp:264:17: note: Variable 'm' with floating point type 'QuantLib::Real' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/midpointcdoengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/recoveryratemodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/recoveryratequote.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/riskyassetswapoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/randomdefaultmodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/analyticcomplexchooserengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/analyticamericanmargrabeengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/analyticeuropeanmargrabeengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/analyticcompoundoptionengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/syntheticcdo.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/analyticpdfhestonengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/riskybond.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/commodities/quantity.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/analyticsimplechooserengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/analyticholderextensibleoptionengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/analytictwoassetcorrelationengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/complexchooseroption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/analyticpartialtimebarrieroptionengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/compoundoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/continuousarithmeticasianlevyengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/everestoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/himalayaoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/continuousarithmeticasianvecerengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/holderextensibleoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/credit/riskyassetswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/analyticwriterextensibleoptionengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/analytictwoassetbarrierengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/kirkspreadoptionengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/margrabeoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/mceverestengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/pagodaoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/mcpagodaengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/mchimalayaengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/simplechooseroption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/partialtimebarrieroption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/twoassetcorrelationoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/twoassetbarrieroption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/exoticoptions/writerextensibleoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/dynprogvppintrinsicvalueengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdextoujumpvanillaengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdhestondoublebarrierengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdmextoujumpsolver.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdmdupire1dop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdmextendedornsteinuhlenbeckop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdmhestongreensfct.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdmextoujumpop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdklugeextouspreadengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdmvppstepconditionfactory.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdmblackscholesfwdop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdmvppstartlimitstepcondition.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdmhestonfwdop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdmvppstepcondition.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdmklugeextouop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdornsteinuhlenbeckvanillaengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdmzabrop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdmsquarerootfwdop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/glued1dmesher.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/vanillavppoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/fx/deltavolquote.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/futures/overnightindexfuture.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/futures/overnightindexfutureratehelper.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/inflation/cpicapfloorengines.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/inflation/yoyoptionlethelpers.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdsimpleextoustorageengine.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdsimpleextoustorageengine.cpp:110:13: warning: Variable 'level' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
            for (Real level=0; level <= arguments_.capacity;
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdsimpleextoustorageengine.cpp:110:13: note: Variable 'level' with floating point type 'QuantLib::Real' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdsimpleextoujumpswingengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/fx/blackdeltacalculator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/inflation/cpicapfloortermpricesurface.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/lattices/extendedbinomialtree.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/lattices/extendedbinomialtree.cpp:93:46: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        pu_ = 0.5 + 0.5*this->driftStep(0.0)/this->dxStep(0.0);
                                             ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/lattices/extendedbinomialtree.cpp:93:46: note: This constructor of an object of type 'ExtendedTrigeorgis' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/lattices/extendedbinomialtree.cpp:93:46: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/math/gaussiancopulapolicy.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/inflation/yoycapfloortermpricesurface.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/math/expm.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/finitedifferences/fdsimpleklugeextouvppengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/math/convolvedstudentt.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/math/multidimquadrature.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/math/multidimintegrator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/math/fireflyalgorithm.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/math/zigguratrng.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/mcbasket/adaptedpathpayoff.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/mcbasket/mcpathbasketengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/mcbasket/pathmultiassetoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/math/piecewiseintegral.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/math/tcopulapolicy.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/mcbasket/longstaffschwartzmultipathpricer.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/math/particleswarmoptimization.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/processes/extendedblackscholesprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/normalclvmodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/math/gaussiannoncentralchisquaredpolynomial.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/processes/extendedornsteinuhlenbeckprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/processes/extouwithjumpsprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/processes/gemanroncoroniprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/processes/hestonslvprocess.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/processes/hestonslvprocess.cpp:39:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        update();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/processes/hestonslvprocess.cpp:39:9: note: This constructor of an object of type 'HestonSLVProcess' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/processes/hestonslvprocess.cpp:39:9: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/processes/vegastressedblackscholesprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/processes/klugeextouprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvmcmodel.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvmcmodel.cpp:133:42: warning: Division by zero [clang-analyzer-core.DivideZero]
        const Size k = calibrationPaths_ / nBins_;
                                         ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvmcmodel.cpp:110:24: note: Assuming the condition is true
        for (Size i=0; i < timeGrid_->size(); ++i) {
                       ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvmcmodel.cpp:110:9: note: Loop condition is true.  Entering loop body
        for (Size i=0; i < timeGrid_->size(); ++i) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvmcmodel.cpp:116:31: note: Assuming 'j' is >= field 'nBins_'
            for (Integer j=0; j < Integer(nBins_); ++j)
                              ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvmcmodel.cpp:116:13: note: Loop condition is false. Execution continues on line 110
            for (Integer j=0; j < Integer(nBins_); ++j)
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvmcmodel.cpp:110:24: note: Assuming the condition is false
        for (Size i=0; i < timeGrid_->size(); ++i) {
                       ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvmcmodel.cpp:110:9: note: Loop condition is false. Execution continues on line 120
        for (Size i=0; i < timeGrid_->size(); ++i) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvmcmodel.cpp:133:42: note: Division by zero
        const Size k = calibrationPaths_ / nBins_;
                                         ^
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:44:17: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
                calculate();
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:484:9: note: Calling 'HestonSLVFDMModel::performCalculations'
        performCalculations();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:289:9: note: Taking false branch
        QL_REQUIRE(referenceDate < endDate_,
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:292:9: note: Assuming the condition is false
        QL_REQUIRE(localVol_->maxTime() >= T,
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:5: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
    ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:292:9: note: Taking false branch
        QL_REQUIRE(localVol_->maxTime() >= T,
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:302:9: note: Loop condition is false. Execution continues on line 309
        while (tIdx < T) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:334:26: note: Assuming the condition is false
        for (Size i = 1; i < timeGrid->size(); ++i) {
                         ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:334:9: note: Loop condition is false. Execution continues on line 350
        for (Size i = 1; i < timeGrid->size(); ++i) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:363:26: note: Assuming the condition is false
        for (Size i = 0; i < timeGrid->size(); ++i) {
                         ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:363:9: note: Loop condition is false. Execution continues on line 375
        for (Size i = 0; i < timeGrid->size(); ++i) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:383:13: note: Assuming field 'logging_' is false
        if (logging_) {
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:383:9: note: Taking false branch
        if (logging_) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:388:26: note: Assuming the condition is true
        for (Size i = 2; i < times.size(); ++i) {
                         ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:388:9: note: Loop condition is true.  Entering loop body
        for (Size i = 2; i < times.size(); ++i) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:392:17: note: Left side of '||' is false
            if (mesher->getFdm1dMeshers()[0] != xMesher[i] ||
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:392:13: note: Taking true branch
            if (mesher->getFdm1dMeshers()[0] != xMesher[i] ||
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:397:21: note: Calling 'reshapePDF<QuantLib::Bilinear>'
                p = reshapePDF<Bilinear>(p, mesher, newMesher);
                    ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:159:24: note: Assuming the condition is true
            QL_REQUIRE(oldLayout->size() == newLayout->size() && oldLayout->size() == p.size(),
                       ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:159:24: note: Left side of '&&' is true
            QL_REQUIRE(oldLayout->size() == newLayout->size() && oldLayout->size() == p.size(),
                       ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:159:66: note: Assuming the condition is true
            QL_REQUIRE(oldLayout->size() == newLayout->size() && oldLayout->size() == p.size(),
                                                                 ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:159:13: note: Taking false branch
            QL_REQUIRE(oldLayout->size() == newLayout->size() && oldLayout->size() == p.size(),
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:163:30: note: Assuming the condition is false
            for (Size i = 0; i < m.rows(); ++i) {
                             ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:163:13: note: Loop condition is false. Execution continues on line 168
            for (Size i = 0; i < m.rows(); ++i) {
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/hestonslvfdmmodel.cpp:168:17: note: Calling 'Bilinear::interpolate'
                interp.interpolate(oldMesher->getFdm1dMeshers()[0]->locations().begin(),
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:93:20: note: Calling constructor for 'BilinearInterpolation'
            return BilinearInterpolation(xBegin,xEnd,yBegin,yEnd,z);
                   ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:80:23: note: Calling constructor for 'BilinearInterpolationImpl<__gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, QuantLib::Matrix>'
                  new detail::BilinearInterpolationImpl<I1,I2,M>(xBegin, xEnd,
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:44:17: note: This constructor of an object of type 'BilinearInterpolationImpl' has not returned when the virtual method was called
                calculate();
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:44:17: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/risk/creditriskplus.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/models/squarerootclvmodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/swaptions/irregularswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/variancegamma/analyticvariancegammaengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/variancegamma/fftvanillaengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/variancegamma/fftvariancegammaengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/variancegamma/variancegammaprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/swaptions/haganirregularswaptionengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/swaptions/irregularswaption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/varianceoption/varianceoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/volatility/blackatmvolcurve.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/variancegamma/fftengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/variancegamma/variancegammamodel.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/variancegamma/variancegammamodel.cpp:35:13: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
            generateArguments();
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/variancegamma/variancegammamodel.cpp:35:13: note: This constructor of an object of type 'VarianceGammaModel' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/variancegamma/variancegammamodel.cpp:35:13: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/shortrate/generalizedhullwhite.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/volatility/equityfxvolsurface.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/volatility/blackvolsurface.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/volatility/extendedblackvariancecurve.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/varianceoption/integralhestonvarianceoptionengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/risk/sensitivityanalysis.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/volatility/interestratevolsurface.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/volatility/extendedblackvariancesurface.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/volatility/noarbsabrsmilesection.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/volatility/noarbsabrabsprobs.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/volatility/svismilesection.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/volatility/volcube.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/volatility/abcdatmvolcurve.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/index.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/volatility/sabrvolsurface.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/bmaindex.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/volatility/noarbsabr.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/volatility/noarbsabr.cpp:79:5: warning: Variable 'tmp' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real tmp = p(fmax_);
    ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/volatility/noarbsabr.cpp:79:5: note: Variable 'tmp' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/volatility/noarbsabr.cpp:85:5: warning: Variable 'tmp' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real tmp = p(fmin_);
    ^
/home/zzy/Documents/Cpp/QuantLib/ql/experimental/volatility/noarbsabr.cpp:85:5: note: Variable 'tmp' with floating point type 'QuantLib::Real' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/ibor/bibor.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/ibor/eonia.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/ibor/euribor.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/ibor/fedfunds.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/ibor/eurlibor.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/ibor/libor.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/ibor/shibor.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/volatility/noarbsabrinterpolatedsmilesection.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/ibor/sofr.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/volatility/sviinterpolatedsmilesection.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/region.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/ibor/sonia.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/iborindex.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/indexmanager.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/interestrateindex.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/indexes/interestrateindex.cpp:59:56: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        registerWith(IndexManager::instance().notifier(name()));
                                                       ^
/home/zzy/Documents/Cpp/QuantLib/ql/indexes/interestrateindex.cpp:43:9: note: Taking false branch
        if (tenor_ == 1*Days) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/indexes/interestrateindex.cpp:59:56: note: This constructor of an object of type 'InterestRateIndex' has not returned when the virtual method was called
        registerWith(IndexManager::instance().notifier(name()));
                                                       ^
/home/zzy/Documents/Cpp/QuantLib/ql/indexes/interestrateindex.cpp:59:56: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/swap/chfliborswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/experimental/volatility/zabr.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/swap/euriborswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/swap/eurliborswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/swap/gbpliborswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/swap/jpyliborswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/averagetype.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/swap/usdliborswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/barriertype.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/swapindex.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/barrieroption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/basketoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/assetswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/bmaswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/bonds/cmsratebond.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/bonds/fixedratebond.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/bonds/cpibond.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/bonds/floatingratebond.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/bonds/zerocouponbond.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/asianoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/bonds/btp.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/claim.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/cliquetoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/compositeinstrument.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/dividendbarrieroption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/cpiswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/indexes/inflationindex.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/indexes/inflationindex.cpp:40:56: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        registerWith(IndexManager::instance().notifier(name()));
                                                       ^
/home/zzy/Documents/Cpp/QuantLib/ql/indexes/inflationindex.cpp:337:16: note: Calling 'make_shared<QuantLib::YoYInflationIndex, const std::__cxx11::basic_string<char> &, const QuantLib::Region &, const bool &, const bool &, const bool &, const QuantLib::Frequency &, const QuantLib::Period &, const QuantLib::Currency &, const QuantLib::Handle<QuantLib::YoYInflationTermStructure> &>'
        return std::make_shared<YoYInflationIndex>(
               ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/shared_ptr.h:717:14: note: Calling 'allocate_shared<QuantLib::YoYInflationIndex, std::allocator<QuantLib::YoYInflationIndex>, const std::__cxx11::basic_string<char> &, const QuantLib::Region &, const bool &, const bool &, const bool &, const QuantLib::Frequency &, const QuantLib::Period &, const QuantLib::Currency &, const QuantLib::Handle<QuantLib::YoYInflationTermStructure> &>'
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
             ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/shared_ptr.h:701:14: note: Calling constructor for 'shared_ptr<QuantLib::YoYInflationIndex>'
      return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
             ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/shared_ptr.h:359:4: note: Calling constructor for '__shared_ptr<QuantLib::YoYInflationIndex, __gnu_cxx::_S_atomic>'
        : __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
          ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/shared_ptr_base.h:1344:14: note: Calling constructor for '__shared_count<__gnu_cxx::_S_atomic>'
        : _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
                    ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/shared_ptr_base.h:680:6: note: Calling constructor for '_Sp_counted_ptr_inplace<QuantLib::YoYInflationIndex, std::allocator<QuantLib::YoYInflationIndex>, __gnu_cxx::_S_atomic>'
            _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
            ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/shared_ptr_base.h:548:4: note: Calling 'allocator_traits::construct'
          allocator_traits<_Alloc>::construct(__a, _M_ptr(),
          ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/alloc_traits.h:484:4: note: Calling 'new_allocator::construct'
        { __a.construct(__p, std::forward<_Args>(__args)...); }
          ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/ext/new_allocator.h:147:23: note: Calling constructor for 'YoYInflationIndex'
        { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
                             ^
/home/zzy/Documents/Cpp/QuantLib/ql/indexes/inflationindex.cpp:203:7: note: Calling constructor for 'InflationIndex'
    : InflationIndex(familyName, region, revised, interpolated,
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/indexes/inflationindex.cpp:40:56: note: This constructor of an object of type 'InflationIndex' has not returned when the virtual method was called
        registerWith(IndexManager::instance().notifier(name()));
                                                       ^
/home/zzy/Documents/Cpp/QuantLib/ql/indexes/inflationindex.cpp:40:56: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/dividendvanillaoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/fixedratebondforward.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/europeanoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/cpicapfloor.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/forward.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/forwardvanillaoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/futures.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/capfloor.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/lookbackoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/creditdefaultswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/floatfloatswaption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/bond.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/impliedvolatility.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/forwardrateagreement.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/makecds.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/floatfloatswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/inflationcapfloor.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/makecapfloor.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/makecms.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/makeois.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/makeyoyinflationcapfloor.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/multiassetoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/oneassetoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/makeswaption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/payoffs.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/quantobarrieroption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/quantoforwardvanillaoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/overnightindexedswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/quantovanillaoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/makevanillaswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/stickyratchet.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/stock.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/swap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/nonstandardswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/nonstandardswaption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/vanillaoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/vanillaswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/varianceswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/vanillaswingoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/interestrate.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/lfmcovarparam.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/yearonyearinflationswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/lfmcovarproxy.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/zerocouponinflationswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/lfmprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/lfmhullwhiteparam.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/lfmswaptionengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/instruments/swaption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/lmcorrmodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/lmexpcorrmodel.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/lmexpcorrmodel.cpp:31:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        generateArguments();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/lmexpcorrmodel.cpp:31:9: note: This constructor of an object of type 'LmExponentialCorrelationModel' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/lmexpcorrmodel.cpp:31:9: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/abcdmathfunction.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/bernsteinpolynomial.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/lmfixedvolmodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/lmvolmodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/beta.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/bspline.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/copulas/alimikhailhaqcopula.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/copulas/claytoncopula.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/copulas/farliegumbelmorgensterncopula.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/copulas/frankcopula.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/copulas/galamboscopula.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/copulas/gaussiancopula.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/copulas/gumbelcopula.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/copulas/huslerreisscopula.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/copulas/independentcopula.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/copulas/marshallolkincopula.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/copulas/maxcopula.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/copulas/mincopula.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/lmextlinexpvolmodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/lmlinexpcorrmodel.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/lmlinexpcorrmodel.cpp:32:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        generateArguments();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/lmlinexpcorrmodel.cpp:29:16: note: Assuming the condition is false
     factors_((factors != Null<Size>()) ? factors : size) {
               ^
/home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/lmlinexpcorrmodel.cpp:29:15: note: '?' condition is false
     factors_((factors != Null<Size>()) ? factors : size) {
              ^
/home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/lmlinexpcorrmodel.cpp:32:9: note: This constructor of an object of type 'LmLinearExponentialCorrelationModel' has not returned when the virtual method was called
        generateArguments();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/lmlinexpcorrmodel.cpp:32:9: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/liborforwardmodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/legacy/libormarketmodels/lmlinexpvolmodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/copulas/plackettcopula.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/distributions/bivariatestudenttdistribution.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/errorfunction.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/distributions/studenttdistribution.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/distributions/gammadistribution.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/factorial.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/incompletegamma.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/integrals/gaussianorthogonalpolynomial.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/distributions/bivariatenormaldistribution.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/integrals/gaussianquadratures.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/integrals/filonintegral.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/integrals/integral.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/integrals/gausslobattointegral.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/integrals/kronrodintegral.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/integrals/segmentintegral.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/integrals/discreteintegrals.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/distributions/chisquaredistribution.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/distributions/normaldistribution.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/matrixutilities/choleskydecomposition.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/matrixutilities/factorreduction.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/matrixutilities/getcovariance.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/matrix.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/matrixutilities/basisincompleteordered.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/matrixutilities/qrdecomposition.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/matrixutilities/pseudosqrt.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/matrixutilities/bicgstab.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/modifiedbessel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/matrixutilities/tapcorrelations.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/matrixutilities/gmres.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/matrixutilities/svd.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/optimization/constraint.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/optimization/conjugategradient.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/optimization/armijo.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/optimization/endcriteria.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/optimization/leastsquare.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/optimization/goldstein.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/optimization/levenbergmarquardt.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/optimization/bfgs.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/optimization/linesearch.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/optimization/linesearchbasedmethod.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/matrixutilities/sparseilupreconditioner.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/optimization/projectedcostfunction.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/matrixutilities/symmetricschurdecomposition.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/optimization/projection.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/matrixutilities/tqreigendecomposition.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/optimization/spherecylinder.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/pascaltriangle.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/primenumbers.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/optimization/steepestdescent.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/polynomialmathfunction.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/quadratic.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/optimization/differentialevolution.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/randomnumbers/latticersg.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/randomnumbers/latticerules.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/randomnumbers/primitivepolynomials.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/randomnumbers/faurersg.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/optimization/lmdif.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/randomnumbers/knuthuniformrng.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/randomnumbers/haltonrsg.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/randomnumbers/lecuyeruniformrng.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/randomnumbers/mt19937uniformrng.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/randomnumbers/sobolbrownianbridgersg.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/randomnumbers/seedgenerator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/rounding.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/optimization/simplex.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/randomnumbers/stochasticcollocationinvcdf.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/richardsonextrapolation.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/boundarycondition.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/sampledcurve.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/statistics/generalstatistics.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/meshers/exponentialjump1dmesher.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/randomnumbers/sobolrsg.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/bsmoperator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/statistics/discrepancystatistics.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/meshers/fdmcev1dmesher.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/meshers/fdmblackscholesmultistrikemesher.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/meshers/fdmmeshercomposite.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/meshers/uniformgridmesher.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/meshers/fdmsimpleprocess1dmesher.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/meshers/concentrating1dmesher.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/statistics/histogram.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/meshers/fdmblackscholesmesher.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/fdmbatesop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/meshers/fdmhestonvariancemesher.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/fdmcevop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/fdmlinearoplayout.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/fdm2dblackscholesop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/fdmg2op.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/fdmhestonhullwhiteop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/math/statistics/incrementalstatistics.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/fdmblackscholesop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/fdmornsteinuhlenbeckop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/firstderivativeop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/nthorderderivativeop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/fdmhullwhiteop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/fdmlocalvolfwdop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/numericaldifferentiation.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/fdmhestonop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/secondderivativeop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/fdmsabrop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/schemes/cranknicolsonscheme.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/secondordermixedderivativeop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/schemes/expliciteulerscheme.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/schemes/douglasscheme.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/schemes/craigsneydscheme.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/schemes/impliciteulerscheme.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/schemes/hundsdorferscheme.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/solvers/fdm1dimsolver.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/solvers/fdm2dblackscholessolver.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/schemes/modifiedcraigsneydscheme.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/solvers/fdmbatessolver.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/schemes/methodoflinesscheme.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/solvers/fdmblackscholessolver.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/ninepointlinearop.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/ninepointlinearop.cpp:111:5: warning: 2 uninitialized fields at the end of the constructor call [clang-analyzer-optin.cplusplus.UninitializedObject]
    }
    ^
/home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/ninepointlinearop.hpp:58:14: note: uninitialized field 'this->d0_'
        Size d0_, d1_;
             ^
/home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/ninepointlinearop.hpp:58:19: note: uninitialized field 'this->d1_'
        Size d0_, d1_;
                  ^
/home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/ninepointlinearop.cpp:113:5: note: Assuming m != *this
    NinePointLinearOp& NinePointLinearOp::operator=(
    ^
/home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/ninepointlinearop.cpp:115:27: note: Calling copy constructor for 'NinePointLinearOp'
        NinePointLinearOp temp(m);
                          ^
/home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/ninepointlinearop.cpp:111:5: note: 2 uninitialized fields at the end of the constructor call
    }
    ^
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/solvers/fdmhestonhullwhitesolver.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/solvers/fdmg2solver.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/solvers/fdmhestonsolver.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/solvers/fdmbackwardsolver.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/stepconditions/fdmamericanstepcondition.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/solvers/fdmhullwhitesolver.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/solvers/fdmsimple2dbssolver.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/stepconditions/fdmbermudanstepcondition.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/stepconditions/fdmsnapshotcondition.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/stepconditions/fdmsimpleswingcondition.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/operators/triplebandlinearop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/tridiagonaloperator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/stepconditions/fdmstepconditioncomposite.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/bsmrndcalculator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/stepconditions/fdmarithmeticaveragecondition.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/fdmaffinemodeltermstructure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/fdmaffinemodelswapinnervalue.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/solvers/fdm2dimsolver.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bicubicsplineinterpolation.hpp:56:17: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
                calculate();
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/solvers/fdm2dimsolver.cpp:82:26: note: Calling 'make_shared<QuantLib::BicubicSpline, __gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, QuantLib::Matrix &>'
        interpolation_ = std::make_shared<BicubicSpline>(x_.begin(), x_.end(),
                         ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/shared_ptr.h:717:14: note: Calling 'allocate_shared<QuantLib::BicubicSpline, std::allocator<QuantLib::BicubicSpline>, __gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, QuantLib::Matrix &>'
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
             ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/shared_ptr.h:701:14: note: Calling constructor for 'shared_ptr<QuantLib::BicubicSpline>'
      return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
             ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/shared_ptr.h:359:4: note: Calling constructor for '__shared_ptr<QuantLib::BicubicSpline, __gnu_cxx::_S_atomic>'
        : __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
          ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/shared_ptr_base.h:1344:14: note: Calling constructor for '__shared_count<__gnu_cxx::_S_atomic>'
        : _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
                    ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/shared_ptr_base.h:680:6: note: Calling constructor for '_Sp_counted_ptr_inplace<QuantLib::BicubicSpline, std::allocator<QuantLib::BicubicSpline>, __gnu_cxx::_S_atomic>'
            _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
            ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/shared_ptr_base.h:548:4: note: Calling 'allocator_traits::construct'
          allocator_traits<_Alloc>::construct(__a, _M_ptr(),
          ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/alloc_traits.h:484:4: note: Calling 'new_allocator::construct'
        { __a.construct(__p, std::forward<_Args>(__args)...); }
          ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/ext/new_allocator.h:147:23: note: Calling constructor for 'BicubicSpline'
        { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
                             ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bicubicsplineinterpolation.hpp:171:23: note: Calling constructor for 'BicubicSplineImpl<__gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, QuantLib::Matrix>'
                  new detail::BicubicSplineImpl<I1,I2,M>(xBegin, xEnd,
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bicubicsplineinterpolation.hpp:56:17: note: This constructor of an object of type 'BicubicSplineImpl' has not returned when the virtual method was called
                calculate();
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bicubicsplineinterpolation.hpp:56:17: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/stepconditions/fdmsimplestoragecondition.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:44:17: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
                calculate();
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/stepconditions/fdmsimplestoragecondition.cpp:60:9: note: Taking true branch
        if (iter != exerciseTimes_.end()) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/stepconditions/fdmsimplestoragecondition.cpp:65:35: note: Calling constructor for 'BilinearInterpolation'
            BilinearInterpolation interpl(x_.begin(), x_.end(),
                                  ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:80:23: note: Calling constructor for 'BilinearInterpolationImpl<__gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, QuantLib::Matrix>'
                  new detail::BilinearInterpolationImpl<I1,I2,M>(xBegin, xEnd,
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:44:17: note: This constructor of an object of type 'BilinearInterpolationImpl' has not returned when the virtual method was called
                calculate();
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:44:17: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/fdmdirichletboundary.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/fdmdiscountdirichletboundary.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/fdmmesherintegral.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/fdmindicesonboundary.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/fdmquantohelper.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/fdminnervaluecalculator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/solvers/fdm3dimsolver.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bicubicsplineinterpolation.hpp:56:17: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
                calculate();
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/solvers/fdm3dimsolver.cpp:88:24: note: Assuming the condition is true
        for (Size i=0; i < z_.size(); ++i) {
                       ^
/home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/solvers/fdm3dimsolver.cpp:88:9: note: Loop condition is true.  Entering loop body
        for (Size i=0; i < z_.size(); ++i) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/solvers/fdm3dimsolver.cpp:93:33: note: Calling 'make_shared<QuantLib::BicubicSpline, __gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, QuantLib::Matrix &>'
            interpolation_[i] = std::make_shared<BicubicSpline>(x_.begin(), x_.end(),
                                ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/shared_ptr.h:717:14: note: Calling 'allocate_shared<QuantLib::BicubicSpline, std::allocator<QuantLib::BicubicSpline>, __gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, QuantLib::Matrix &>'
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
             ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/shared_ptr.h:701:14: note: Calling constructor for 'shared_ptr<QuantLib::BicubicSpline>'
      return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
             ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/shared_ptr.h:359:4: note: Calling constructor for '__shared_ptr<QuantLib::BicubicSpline, __gnu_cxx::_S_atomic>'
        : __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
          ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/shared_ptr_base.h:1344:14: note: Calling constructor for '__shared_count<__gnu_cxx::_S_atomic>'
        : _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
                    ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/shared_ptr_base.h:680:6: note: Calling constructor for '_Sp_counted_ptr_inplace<QuantLib::BicubicSpline, std::allocator<QuantLib::BicubicSpline>, __gnu_cxx::_S_atomic>'
            _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
            ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/shared_ptr_base.h:548:4: note: Calling 'allocator_traits::construct'
          allocator_traits<_Alloc>::construct(__a, _M_ptr(),
          ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/bits/alloc_traits.h:484:4: note: Calling 'new_allocator::construct'
        { __a.construct(__p, std::forward<_Args>(__args)...); }
          ^
/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/ext/new_allocator.h:147:23: note: Calling constructor for 'BicubicSpline'
        { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
                             ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bicubicsplineinterpolation.hpp:171:23: note: Calling constructor for 'BicubicSplineImpl<__gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<const double *, std::vector<double, std::allocator<double> > >, QuantLib::Matrix>'
                  new detail::BicubicSplineImpl<I1,I2,M>(xBegin, xEnd,
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bicubicsplineinterpolation.hpp:56:17: note: This constructor of an object of type 'BicubicSplineImpl' has not returned when the virtual method was called
                calculate();
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bicubicsplineinterpolation.hpp:56:17: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/fdmtimedepdirichletboundary.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/hestonrndcalculator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/lattices/binomialtree.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/fdmdividendhandler.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/lattices/trinomialtree.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/montecarlo/brownianbridge.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/gbsmrndcalculator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/cevrndcalculator.cpp
/usr/include/boost/math/tools/toms748_solve.hpp:393:9: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
      e = d;
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/cevrndcalculator.cpp:107:13: note: Assuming the condition is false
        if (delta_ < 2.0) {
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/cevrndcalculator.cpp:107:9: note: Taking false branch
        if (delta_ < 2.0) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/cevrndcalculator.cpp:132:32: note: Calling 'quantile<double, boost::math::policies::policy<boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy>>'
            const Real x = t * boost::math::quantile(
                               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:979:17: note: Calling 'nccs_quantile<double, boost::math::policies::policy<boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy>>'
         return detail::nccs_quantile(dist, p, false);
                ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:416:16: note: Left side of '||' is false
            if(!detail::check_df(
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:416:16: note: Left side of '||' is false
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:416:13: note: Taking false branch
            if(!detail::check_df(
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:435:16: note: Assuming 'p' is not equal to 0
            if(p == 0)
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:435:13: note: Taking false branch
            if(p == 0)
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:437:16: note: Assuming 'p' is not equal to 1
            if(p == 1)
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:437:13: note: Taking false branch
            if(p == 1)
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:452:16: note: 'comp' is false
            if(comp)
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:452:13: note: Taking false branch
            if(comp)
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:471:16: note: Assuming the condition is false
            if(guess < 0.005)
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:471:13: note: Taking false branch
            if(guess < 0.005)
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:479:33: note: Calling 'generic_quantile<boost::math::non_central_chi_squared_distribution<long double, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy> >>'
            value_type result = detail::generic_quantile(
                                ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:60:7: note: Assuming 'p' is not equal to 0
   if(p == 0)
      ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:60:4: note: Taking false branch
   if(p == 0)
   ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:66:7: note: Assuming 'p' is not equal to 1
   if(p == 1)
      ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:66:4: note: Taking false branch
   if(p == 1)
   ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:76:43: note: Calling 'bracket_and_solve_root<boost::math::detail::generic_quantile_finder<boost::math::non_central_chi_squared_distribution<long double, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy> > >, long double, boost::math::tools::eps_tolerance<long double>, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy>>'
   std::pair<value_type, value_type> ir = tools::bracket_and_solve_root(
                                          ^
/usr/include/boost/math/tools/toms748_solve.hpp:519:20: note: Assuming 'guess' is >= 0
   if((fa < 0) == (guess < 0 ? !rising : rising))
                   ^
/usr/include/boost/math/tools/toms748_solve.hpp:519:20: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:519:7: note: Assuming the condition is true
   if((fa < 0) == (guess < 0 ? !rising : rising))
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:519:4: note: Taking true branch
   if((fa < 0) == (guess < 0 ? !rising : rising))
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:525:7: note: Loop condition is false. Execution continues on line 592
      while((boost::math::sign)(fb) == (boost::math::sign)(fa))
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:596:8: note: Assuming 'a' is >= 0
      (a < 0 ? b : a), 
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:596:8: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:597:8: note: Assuming 'a' is >= 0
      (a < 0 ? a : b), 
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:597:8: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:598:8: note: Assuming 'a' is >= 0
      (a < 0 ? fb : fa), 
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:598:8: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:599:8: note: Assuming 'a' is < 0
      (a < 0 ? fa : fb), 
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:599:8: note: '?' condition is true
/usr/include/boost/math/tools/toms748_solve.hpp:594:24: note: Calling 'toms748_solve<boost::math::detail::generic_quantile_finder<boost::math::non_central_chi_squared_distribution<long double, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy> > >, long double, boost::math::tools::eps_tolerance<long double>, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy>>'
   std::pair<T, T> r = toms748_solve(
                       ^
/usr/include/boost/math/tools/toms748_solve.hpp:308:8: note: 'max_iter' is not equal to 0
   if (max_iter == 0)
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:308:4: note: Taking false branch
   if (max_iter == 0)
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:312:38: note: 'd' declared without an initial value
   T a, b, fa, fb, c, u, fu, a0, b0, d, fd, e, fe;
                                     ^
/usr/include/boost/math/tools/toms748_solve.hpp:318:7: note: Assuming 'a' is < 'b'
   if(a >= b)
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:318:4: note: Taking false branch
   if(a >= b)
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:7: note: Assuming the condition is false
   if(tol(a, b) || (fa == 0) || (fb == 0))
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:7: note: Left side of '||' is false
/usr/include/boost/math/tools/toms748_solve.hpp:325:21: note: Assuming 'fa' is not equal to 0
   if(tol(a, b) || (fa == 0) || (fb == 0))
                    ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:7: note: Left side of '||' is false
   if(tol(a, b) || (fa == 0) || (fb == 0))
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:34: note: Assuming 'fb' is not equal to 0
   if(tol(a, b) || (fa == 0) || (fb == 0))
                                 ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:4: note: Taking false branch
   if(tol(a, b) || (fa == 0) || (fb == 0))
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:335:7: note: Assuming the condition is false
   if(boost::math::sign(fa) * boost::math::sign(fb) > 0)
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:335:4: note: Taking false branch
   if(boost::math::sign(fa) * boost::math::sign(fb) > 0)
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:342:7: note: Assuming 'fa' is equal to 0
   if(fa != 0)
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:342:4: note: Taking false branch
   if(fa != 0)
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:366:10: note: 'count' is 199
   while(count && (fa != 0) && !tol(a, b))
         ^
/usr/include/boost/math/tools/toms748_solve.hpp:366:10: note: Left side of '&&' is true
/usr/include/boost/math/tools/toms748_solve.hpp:366:20: note: Assuming 'fa' is not equal to 0
   while(count && (fa != 0) && !tol(a, b))
                   ^
/usr/include/boost/math/tools/toms748_solve.hpp:366:10: note: Left side of '&&' is true
   while(count && (fa != 0) && !tol(a, b))
         ^
/usr/include/boost/math/tools/toms748_solve.hpp:366:4: note: Loop condition is true.  Entering loop body
   while(count && (fa != 0) && !tol(a, b))
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:380:20: note: Assuming the condition is true
      bool prof = (fabs(fa - fb) < min_diff) || (fabs(fa - fd) < min_diff) || (fabs(fa - fe) < min_diff) || (fabs(fb - fd) < min_diff) || (fabs(fb - fe) < min_diff) || (fabs(fd - fe) < min_diff);
                   ^
/usr/include/boost/math/tools/toms748_solve.hpp:380:46: note: Left side of '||' is true
      bool prof = (fabs(fa - fb) < min_diff) || (fabs(fa - fd) < min_diff) || (fabs(fa - fe) < min_diff) || (fabs(fb - fd) < min_diff) || (fabs(fb - fe) < min_diff) || (fabs(fd - fe) < min_diff);
                                             ^
/usr/include/boost/math/tools/toms748_solve.hpp:381:10: note: 'prof' is true
      if(prof)
         ^
/usr/include/boost/math/tools/toms748_solve.hpp:381:7: note: Taking true branch
      if(prof)
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:393:9: note: Assigned value is garbage or undefined
      e = d;
        ^
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/riskneutraldensitycalculator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/montecarlo/parametricexercise.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/calibrationhelper.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/montecarlo/lsmbasissystem.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/montecarlo/genericlsregression.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/equity/hestonmodelhelper.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/browniangenerators/mtbrowniangenerator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/equity/gjrgarchmodel.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/models/equity/gjrgarchmodel.cpp:60:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        generateArguments();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/models/equity/gjrgarchmodel.cpp:60:9: note: This constructor of an object of type 'GJRGARCHModel' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/models/equity/gjrgarchmodel.cpp:60:9: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/localvolrndcalculator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/equity/hestonmodel.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/models/equity/hestonmodel.cpp:37:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        generateArguments();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/models/equity/hestonmodel.cpp:37:9: note: This constructor of an object of type 'HestonModel' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/models/equity/hestonmodel.cpp:37:9: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/callability/bermudanswaptionexercisevalue.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/browniangenerators/sobolbrowniangenerator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/callability/nothingexercisevalue.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/callability/parametricexerciseadapter.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/accountingengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/callability/swapbasissystem.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/equity/piecewisetimedependenthestonmodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/equity/batesmodel.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/models/equity/batesmodel.cpp:35:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        generateArguments();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/models/equity/batesmodel.cpp:49:7: note: Calling constructor for 'BatesModel'
    : BatesModel(process) {
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/models/equity/batesmodel.cpp:24:5: note: Virtual base initialization skipped because it has already been handled by the most derived class
    BatesModel::BatesModel(const std::shared_ptr<BatesProcess> & process)
    ^
/home/zzy/Documents/Cpp/QuantLib/ql/models/equity/batesmodel.cpp:35:9: note: This constructor of an object of type 'BatesModel' has not returned when the virtual method was called
        generateArguments();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/models/equity/batesmodel.cpp:35:9: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/callability/swapforwardbasissystem.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/callability/swapratetrigger.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/callability/triggeredswapexercise.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/callability/collectnodedata.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/correlations/expcorrelations.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/correlations/cotswapfromfwdcorrelation.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/correlations/timehomogeneousforwardcorrelation.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/callability/lsstrategy.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/squarerootprocessrndcalculator.cpp
/usr/include/boost/math/tools/toms748_solve.hpp:209:35: warning: The left operand of '-' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
   T A = safe_div(T(fd - fb), T(d - b), tools::max_value<T>());
                                  ^
/home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/squarerootprocessrndcalculator.cpp:64:16: note: Calling 'quantile<double, boost::math::policies::policy<boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy>>'
        return boost::math::quantile(dist, q) / k;
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:979:17: note: Calling 'nccs_quantile<double, boost::math::policies::policy<boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy>>'
         return detail::nccs_quantile(dist, p, false);
                ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:416:16: note: Left side of '||' is false
            if(!detail::check_df(
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:416:16: note: Left side of '||' is false
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:416:13: note: Taking false branch
            if(!detail::check_df(
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:435:16: note: Assuming 'p' is not equal to 0
            if(p == 0)
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:435:13: note: Taking false branch
            if(p == 0)
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:437:16: note: Assuming 'p' is not equal to 1
            if(p == 1)
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:437:13: note: Taking false branch
            if(p == 1)
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:452:16: note: 'comp' is false
            if(comp)
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:452:13: note: Taking false branch
            if(comp)
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:471:16: note: Assuming the condition is false
            if(guess < 0.005)
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:471:13: note: Taking false branch
            if(guess < 0.005)
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:479:33: note: Calling 'generic_quantile<boost::math::non_central_chi_squared_distribution<long double, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy> >>'
            value_type result = detail::generic_quantile(
                                ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:60:7: note: Assuming 'p' is not equal to 0
   if(p == 0)
      ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:60:4: note: Taking false branch
   if(p == 0)
   ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:66:7: note: Assuming 'p' is not equal to 1
   if(p == 1)
      ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:66:4: note: Taking false branch
   if(p == 1)
   ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:76:43: note: Calling 'bracket_and_solve_root<boost::math::detail::generic_quantile_finder<boost::math::non_central_chi_squared_distribution<long double, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy> > >, long double, boost::math::tools::eps_tolerance<long double>, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy>>'
   std::pair<value_type, value_type> ir = tools::bracket_and_solve_root(
                                          ^
/usr/include/boost/math/tools/toms748_solve.hpp:519:20: note: Assuming 'guess' is >= 0
   if((fa < 0) == (guess < 0 ? !rising : rising))
                   ^
/usr/include/boost/math/tools/toms748_solve.hpp:519:20: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:519:7: note: Assuming the condition is true
   if((fa < 0) == (guess < 0 ? !rising : rising))
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:519:4: note: Taking true branch
   if((fa < 0) == (guess < 0 ? !rising : rising))
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:525:7: note: Loop condition is false. Execution continues on line 592
      while((boost::math::sign)(fb) == (boost::math::sign)(fa))
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:596:8: note: Assuming 'a' is >= 0
      (a < 0 ? b : a), 
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:596:8: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:597:8: note: Assuming 'a' is >= 0
      (a < 0 ? a : b), 
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:597:8: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:598:8: note: Assuming 'a' is >= 0
      (a < 0 ? fb : fa), 
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:598:8: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:599:8: note: Assuming 'a' is >= 0
      (a < 0 ? fa : fb), 
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:599:8: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:594:24: note: Calling 'toms748_solve<boost::math::detail::generic_quantile_finder<boost::math::non_central_chi_squared_distribution<long double, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy> > >, long double, boost::math::tools::eps_tolerance<long double>, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy>>'
   std::pair<T, T> r = toms748_solve(
                       ^
/usr/include/boost/math/tools/toms748_solve.hpp:308:8: note: 'max_iter' is not equal to 0
   if (max_iter == 0)
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:308:4: note: Taking false branch
   if (max_iter == 0)
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:312:38: note: 'd' declared without an initial value
   T a, b, fa, fb, c, u, fu, a0, b0, d, fd, e, fe;
                                     ^
/usr/include/boost/math/tools/toms748_solve.hpp:318:7: note: Assuming 'a' is < 'b'
   if(a >= b)
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:318:4: note: Taking false branch
   if(a >= b)
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:7: note: Assuming the condition is false
   if(tol(a, b) || (fa == 0) || (fb == 0))
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:7: note: Left side of '||' is false
/usr/include/boost/math/tools/toms748_solve.hpp:325:21: note: Assuming 'fa' is not equal to 0
   if(tol(a, b) || (fa == 0) || (fb == 0))
                    ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:7: note: Left side of '||' is false
   if(tol(a, b) || (fa == 0) || (fb == 0))
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:34: note: Assuming 'fb' is not equal to 0
   if(tol(a, b) || (fa == 0) || (fb == 0))
                                 ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:4: note: Taking false branch
   if(tol(a, b) || (fa == 0) || (fb == 0))
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:335:4: note: Taking false branch
   if(boost::math::sign(fa) * boost::math::sign(fb) > 0)
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:342:7: note: Assuming 'fa' is equal to 0
   if(fa != 0)
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:342:4: note: Taking false branch
   if(fa != 0)
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:366:10: note: 'count' is 199
   while(count && (fa != 0) && !tol(a, b))
         ^
/usr/include/boost/math/tools/toms748_solve.hpp:366:10: note: Left side of '&&' is true
/usr/include/boost/math/tools/toms748_solve.hpp:366:20: note: Assuming 'fa' is not equal to 0
   while(count && (fa != 0) && !tol(a, b))
                   ^
/usr/include/boost/math/tools/toms748_solve.hpp:366:10: note: Left side of '&&' is true
   while(count && (fa != 0) && !tol(a, b))
         ^
/usr/include/boost/math/tools/toms748_solve.hpp:366:4: note: Loop condition is true.  Entering loop body
   while(count && (fa != 0) && !tol(a, b))
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:380:20: note: Assuming the condition is true
      bool prof = (fabs(fa - fb) < min_diff) || (fabs(fa - fd) < min_diff) || (fabs(fa - fe) < min_diff) || (fabs(fb - fd) < min_diff) || (fabs(fb - fe) < min_diff) || (fabs(fd - fe) < min_diff);
                   ^
/usr/include/boost/math/tools/toms748_solve.hpp:380:46: note: Left side of '||' is true
      bool prof = (fabs(fa - fb) < min_diff) || (fabs(fa - fd) < min_diff) || (fabs(fa - fe) < min_diff) || (fabs(fb - fd) < min_diff) || (fabs(fb - fe) < min_diff) || (fabs(fd - fe) < min_diff);
                                             ^
/usr/include/boost/math/tools/toms748_solve.hpp:381:10: note: 'prof' is true
      if(prof)
         ^
/usr/include/boost/math/tools/toms748_solve.hpp:381:7: note: Taking true branch
      if(prof)
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:383:50: note: Passing value via 3rd parameter 'd'
         c = detail::quadratic_interpolate(a, b, d, fa, fb, fd, 2);
                                                 ^
/usr/include/boost/math/tools/toms748_solve.hpp:383:14: note: Calling 'quadratic_interpolate<long double>'
         c = detail::quadratic_interpolate(a, b, d, fa, fb, fd, 2);
             ^
/usr/include/boost/math/tools/toms748_solve.hpp:209:35: note: The left operand of '-' is a garbage value
   T A = safe_div(T(fd - fb), T(d - b), tools::max_value<T>());
                                  ^
/usr/include/boost/math/tools/toms748_solve.hpp:264:15: warning: The left operand of '-' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
   T q11 = (d - e) * fd / (fe - fd);
              ^
/home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/squarerootprocessrndcalculator.cpp:64:16: note: Calling 'quantile<double, boost::math::policies::policy<boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy>>'
        return boost::math::quantile(dist, q) / k;
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:979:17: note: Calling 'nccs_quantile<double, boost::math::policies::policy<boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy>>'
         return detail::nccs_quantile(dist, p, false);
                ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:416:16: note: Left side of '||' is false
            if(!detail::check_df(
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:416:16: note: Left side of '||' is false
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:416:13: note: Taking false branch
            if(!detail::check_df(
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:435:16: note: Assuming 'p' is not equal to 0
            if(p == 0)
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:435:13: note: Taking false branch
            if(p == 0)
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:437:16: note: Assuming 'p' is not equal to 1
            if(p == 1)
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:437:13: note: Taking false branch
            if(p == 1)
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:452:16: note: 'comp' is false
            if(comp)
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:452:13: note: Taking false branch
            if(comp)
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:471:16: note: Assuming the condition is false
            if(guess < 0.005)
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:471:13: note: Taking false branch
            if(guess < 0.005)
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:479:33: note: Calling 'generic_quantile<boost::math::non_central_chi_squared_distribution<long double, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy> >>'
            value_type result = detail::generic_quantile(
                                ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:60:7: note: Assuming 'p' is not equal to 0
   if(p == 0)
      ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:60:4: note: Taking false branch
   if(p == 0)
   ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:66:7: note: Assuming 'p' is not equal to 1
   if(p == 1)
      ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:66:4: note: Taking false branch
   if(p == 1)
   ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:76:43: note: Calling 'bracket_and_solve_root<boost::math::detail::generic_quantile_finder<boost::math::non_central_chi_squared_distribution<long double, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy> > >, long double, boost::math::tools::eps_tolerance<long double>, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy>>'
   std::pair<value_type, value_type> ir = tools::bracket_and_solve_root(
                                          ^
/usr/include/boost/math/tools/toms748_solve.hpp:519:20: note: Assuming 'guess' is >= 0
   if((fa < 0) == (guess < 0 ? !rising : rising))
                   ^
/usr/include/boost/math/tools/toms748_solve.hpp:519:20: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:519:7: note: Assuming the condition is true
   if((fa < 0) == (guess < 0 ? !rising : rising))
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:519:4: note: Taking true branch
   if((fa < 0) == (guess < 0 ? !rising : rising))
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:525:7: note: Loop condition is false. Execution continues on line 592
      while((boost::math::sign)(fb) == (boost::math::sign)(fa))
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:596:8: note: Assuming 'a' is >= 0
      (a < 0 ? b : a), 
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:596:8: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:597:8: note: Assuming 'a' is >= 0
      (a < 0 ? a : b), 
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:597:8: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:598:8: note: Assuming 'a' is >= 0
      (a < 0 ? fb : fa), 
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:598:8: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:599:8: note: Assuming 'a' is >= 0
      (a < 0 ? fa : fb), 
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:599:8: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:594:24: note: Calling 'toms748_solve<boost::math::detail::generic_quantile_finder<boost::math::non_central_chi_squared_distribution<long double, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy> > >, long double, boost::math::tools::eps_tolerance<long double>, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy>>'
   std::pair<T, T> r = toms748_solve(
                       ^
/usr/include/boost/math/tools/toms748_solve.hpp:308:8: note: 'max_iter' is not equal to 0
   if (max_iter == 0)
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:308:4: note: Taking false branch
   if (max_iter == 0)
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:312:38: note: 'd' declared without an initial value
   T a, b, fa, fb, c, u, fu, a0, b0, d, fd, e, fe;
                                     ^
/usr/include/boost/math/tools/toms748_solve.hpp:318:7: note: Assuming 'a' is < 'b'
   if(a >= b)
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:318:4: note: Taking false branch
   if(a >= b)
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:7: note: Assuming the condition is false
   if(tol(a, b) || (fa == 0) || (fb == 0))
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:7: note: Left side of '||' is false
/usr/include/boost/math/tools/toms748_solve.hpp:325:21: note: Assuming 'fa' is not equal to 0
   if(tol(a, b) || (fa == 0) || (fb == 0))
                    ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:7: note: Left side of '||' is false
   if(tol(a, b) || (fa == 0) || (fb == 0))
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:34: note: Assuming 'fb' is not equal to 0
   if(tol(a, b) || (fa == 0) || (fb == 0))
                                 ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:4: note: Taking false branch
   if(tol(a, b) || (fa == 0) || (fb == 0))
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:335:4: note: Taking false branch
   if(boost::math::sign(fa) * boost::math::sign(fb) > 0)
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:342:7: note: Assuming 'fa' is equal to 0
   if(fa != 0)
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:342:4: note: Taking false branch
   if(fa != 0)
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:366:10: note: 'count' is 199
   while(count && (fa != 0) && !tol(a, b))
         ^
/usr/include/boost/math/tools/toms748_solve.hpp:366:10: note: Left side of '&&' is true
/usr/include/boost/math/tools/toms748_solve.hpp:366:20: note: Assuming 'fa' is not equal to 0
   while(count && (fa != 0) && !tol(a, b))
                   ^
/usr/include/boost/math/tools/toms748_solve.hpp:366:10: note: Left side of '&&' is true
   while(count && (fa != 0) && !tol(a, b))
         ^
/usr/include/boost/math/tools/toms748_solve.hpp:366:4: note: Loop condition is true.  Entering loop body
   while(count && (fa != 0) && !tol(a, b))
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:380:20: note: Assuming the condition is true
      bool prof = (fabs(fa - fb) < min_diff) || (fabs(fa - fd) < min_diff) || (fabs(fa - fe) < min_diff) || (fabs(fb - fd) < min_diff) || (fabs(fb - fe) < min_diff) || (fabs(fd - fe) < min_diff);
                   ^
/usr/include/boost/math/tools/toms748_solve.hpp:380:46: note: Left side of '||' is true
      bool prof = (fabs(fa - fb) < min_diff) || (fabs(fa - fd) < min_diff) || (fabs(fa - fe) < min_diff) || (fabs(fb - fd) < min_diff) || (fabs(fb - fe) < min_diff) || (fabs(fd - fe) < min_diff);
                                             ^
/usr/include/boost/math/tools/toms748_solve.hpp:381:10: note: Assuming 'prof' is false
      if(prof)
         ^
/usr/include/boost/math/tools/toms748_solve.hpp:381:7: note: Taking false branch
      if(prof)
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:388:46: note: Passing value via 3rd parameter 'd'
         c = detail::cubic_interpolate(a, b, d, e, fa, fb, fd, fe);
                                             ^
/usr/include/boost/math/tools/toms748_solve.hpp:388:14: note: Calling 'cubic_interpolate<long double>'
         c = detail::cubic_interpolate(a, b, d, e, fa, fb, fd, fe);
             ^
/usr/include/boost/math/tools/toms748_solve.hpp:264:15: note: The left operand of '-' is a garbage value
   T q11 = (d - e) * fd / (fe - fd);
              ^
/usr/include/boost/math/tools/toms748_solve.hpp:393:9: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
      e = d;
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/methods/finitedifferences/utilities/squarerootprocessrndcalculator.cpp:64:16: note: Calling 'quantile<double, boost::math::policies::policy<boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy>>'
        return boost::math::quantile(dist, q) / k;
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:979:17: note: Calling 'nccs_quantile<double, boost::math::policies::policy<boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy>>'
         return detail::nccs_quantile(dist, p, false);
                ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:416:16: note: Left side of '||' is false
            if(!detail::check_df(
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:416:16: note: Left side of '||' is false
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:416:13: note: Taking false branch
            if(!detail::check_df(
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:435:16: note: Assuming 'p' is not equal to 0
            if(p == 0)
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:435:13: note: Taking false branch
            if(p == 0)
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:437:16: note: Assuming 'p' is not equal to 1
            if(p == 1)
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:437:13: note: Taking false branch
            if(p == 1)
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:452:16: note: 'comp' is false
            if(comp)
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:452:13: note: Taking false branch
            if(comp)
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:471:16: note: Assuming the condition is false
            if(guess < 0.005)
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:471:13: note: Taking false branch
            if(guess < 0.005)
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:479:33: note: Calling 'generic_quantile<boost::math::non_central_chi_squared_distribution<long double, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy> >>'
            value_type result = detail::generic_quantile(
                                ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:60:7: note: Assuming 'p' is not equal to 0
   if(p == 0)
      ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:60:4: note: Taking false branch
   if(p == 0)
   ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:66:7: note: Assuming 'p' is not equal to 1
   if(p == 1)
      ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:66:4: note: Taking false branch
   if(p == 1)
   ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:76:43: note: Calling 'bracket_and_solve_root<boost::math::detail::generic_quantile_finder<boost::math::non_central_chi_squared_distribution<long double, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy> > >, long double, boost::math::tools::eps_tolerance<long double>, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy>>'
   std::pair<value_type, value_type> ir = tools::bracket_and_solve_root(
                                          ^
/usr/include/boost/math/tools/toms748_solve.hpp:519:20: note: Assuming 'guess' is >= 0
   if((fa < 0) == (guess < 0 ? !rising : rising))
                   ^
/usr/include/boost/math/tools/toms748_solve.hpp:519:20: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:519:7: note: Assuming the condition is true
   if((fa < 0) == (guess < 0 ? !rising : rising))
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:519:4: note: Taking true branch
   if((fa < 0) == (guess < 0 ? !rising : rising))
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:525:7: note: Loop condition is false. Execution continues on line 592
      while((boost::math::sign)(fb) == (boost::math::sign)(fa))
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:596:8: note: Assuming 'a' is >= 0
      (a < 0 ? b : a), 
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:596:8: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:597:8: note: Assuming 'a' is >= 0
      (a < 0 ? a : b), 
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:597:8: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:598:8: note: Assuming 'a' is >= 0
      (a < 0 ? fb : fa), 
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:598:8: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:599:8: note: Assuming 'a' is < 0
      (a < 0 ? fa : fb), 
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:599:8: note: '?' condition is true
/usr/include/boost/math/tools/toms748_solve.hpp:594:24: note: Calling 'toms748_solve<boost::math::detail::generic_quantile_finder<boost::math::non_central_chi_squared_distribution<long double, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy> > >, long double, boost::math::tools::eps_tolerance<long double>, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy>>'
   std::pair<T, T> r = toms748_solve(
                       ^
/usr/include/boost/math/tools/toms748_solve.hpp:308:8: note: 'max_iter' is not equal to 0
   if (max_iter == 0)
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:308:4: note: Taking false branch
   if (max_iter == 0)
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:312:38: note: 'd' declared without an initial value
   T a, b, fa, fb, c, u, fu, a0, b0, d, fd, e, fe;
                                     ^
/usr/include/boost/math/tools/toms748_solve.hpp:318:7: note: Assuming 'a' is < 'b'
   if(a >= b)
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:318:4: note: Taking false branch
   if(a >= b)
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:7: note: Assuming the condition is false
   if(tol(a, b) || (fa == 0) || (fb == 0))
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:7: note: Left side of '||' is false
/usr/include/boost/math/tools/toms748_solve.hpp:325:21: note: Assuming 'fa' is not equal to 0
   if(tol(a, b) || (fa == 0) || (fb == 0))
                    ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:7: note: Left side of '||' is false
   if(tol(a, b) || (fa == 0) || (fb == 0))
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:34: note: Assuming 'fb' is not equal to 0
   if(tol(a, b) || (fa == 0) || (fb == 0))
                                 ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:4: note: Taking false branch
   if(tol(a, b) || (fa == 0) || (fb == 0))
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:335:4: note: Taking false branch
   if(boost::math::sign(fa) * boost::math::sign(fb) > 0)
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:342:7: note: Assuming 'fa' is equal to 0
   if(fa != 0)
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:342:4: note: Taking false branch
   if(fa != 0)
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:366:10: note: 'count' is 199
   while(count && (fa != 0) && !tol(a, b))
         ^
/usr/include/boost/math/tools/toms748_solve.hpp:366:10: note: Left side of '&&' is true
/usr/include/boost/math/tools/toms748_solve.hpp:366:20: note: Assuming 'fa' is not equal to 0
   while(count && (fa != 0) && !tol(a, b))
                   ^
/usr/include/boost/math/tools/toms748_solve.hpp:366:10: note: Left side of '&&' is true
   while(count && (fa != 0) && !tol(a, b))
         ^
/usr/include/boost/math/tools/toms748_solve.hpp:366:4: note: Loop condition is true.  Entering loop body
   while(count && (fa != 0) && !tol(a, b))
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:380:20: note: Assuming the condition is true
      bool prof = (fabs(fa - fb) < min_diff) || (fabs(fa - fd) < min_diff) || (fabs(fa - fe) < min_diff) || (fabs(fb - fd) < min_diff) || (fabs(fb - fe) < min_diff) || (fabs(fd - fe) < min_diff);
                   ^
/usr/include/boost/math/tools/toms748_solve.hpp:380:46: note: Left side of '||' is true
      bool prof = (fabs(fa - fb) < min_diff) || (fabs(fa - fd) < min_diff) || (fabs(fa - fe) < min_diff) || (fabs(fb - fd) < min_diff) || (fabs(fb - fe) < min_diff) || (fabs(fd - fe) < min_diff);
                                             ^
/usr/include/boost/math/tools/toms748_solve.hpp:381:10: note: 'prof' is true
      if(prof)
         ^
/usr/include/boost/math/tools/toms748_solve.hpp:381:7: note: Taking true branch
      if(prof)
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:393:9: note: Assigned value is garbage or undefined
      e = d;
        ^
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/curvestates/coterminalswapcurvestate.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/curvestates/cmswapcurvestate.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/curvestates/lmmcurvestate.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/discounter.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/curvestate.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/driftcomputation/cmsmmdriftcalculator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/evolutiondescription.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/driftcomputation/lmmdriftcalculator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/driftcomputation/smmdriftcalculator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/driftcomputation/lmmnormaldriftcalculator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/evolvers/lognormalcmswapratepc.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/evolvers/lognormalcotswapratepc.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/evolvers/marketmodelvolprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/evolvers/lognormalfwdrateballand.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/evolvers/lognormalfwdrateeuler.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/evolvers/lognormalfwdrateiballand.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/callability/upperboundengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/evolvers/lognormalfwdrateipc.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/evolvers/lognormalfwdratepc.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/marketmodeldifferences.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/evolvers/lognormalfwdrateeulerconstrained.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/evolvers/volprocesses/squarerootandersen.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/models/alphaformconcrete.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/forwardforwardmappings.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/evolvers/normalfwdratepc.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/evolvers/svddfwdratepc.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/marketmodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/models/capletcoterminalperiodic.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/models/alphafinder.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/models/abcdvol.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/models/capletcoterminalmaxhomogeneity.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/historicalratesanalysis.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/models/ctsmmcapletcalibration.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/models/capletcoterminalswaptioncalibration.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/models/piecewiseconstantabcdvariance.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/models/cotswaptofwdadapter.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/models/piecewiseconstantvariance.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/models/fwdperiodadapter.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/models/volatilityinterpolationspecifier.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/models/capletcoterminalalphacalibration.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/models/fwdtocotswapadapter.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/pathwisediscounter.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/models/pseudorootfacade.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/models/flatvol.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/pathwisegreeks/ratepseudorootjacobian.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/pathwisegreeks/bumpinstrumentjacobian.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/multiproductmultistep.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/multiproductonestep.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/pathwisegreeks/swaptionpseudojacobian.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/multiproductcomposite.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/pathwisegreeks/vegabumpcluster.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/multistep/exerciseadapter.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/multistep/multistepcoinitialswaps.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/multistep/cashrebate.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/models/volatilityinterpolationspecifierabcd.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/compositeproduct.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/multistep/callspecifiedmultiproduct.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/multistep/multistepnothing.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/multistep/multistepcoterminalswaps.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/multistep/multistepforwards.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/multistep/multistepinversefloater.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/multistep/multistepoptionlets.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/multistep/multisteppathwisewrapper.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/multistep/multistepcoterminalswaptions.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/multistep/multistepratchet.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/multistep/multistepswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/multistep/multisteptarn.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/onestep/onestepcoinitialswaps.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/multistep/multistepperiodcapletswaptions.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/onestep/onestepcoterminalswaps.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/onestep/onestepforwards.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/multistep/multistepswaption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/onestep/onestepoptionlets.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/pathwise/pathwiseproductcallspecified.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/pathwise/pathwiseproductinversefloater.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/pathwise/pathwiseproductswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/pathwise/pathwiseproductcashrebate.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/pathwise/pathwiseproductswaption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/singleproductcomposite.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/swapforwardmappings.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/products/pathwise/pathwiseproductcaplet.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/calibrationhelpers/caphelper.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/calibrationhelpers/swaptionhelper.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/pathwiseaccountingengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/utilities.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/onefactormodels/extendedcoxingersollross.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/onefactormodels/extendedcoxingersollross.cpp:32:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        generateArguments();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/onefactormodels/extendedcoxingersollross.cpp:32:9: note: This constructor of an object of type 'ExtendedCoxIngersollRoss' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/onefactormodels/extendedcoxingersollross.cpp:32:9: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/marketmodels/proxygreekengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/onefactormodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/model.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/onefactormodels/coxingersollross.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/twofactormodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/volatility/constantestimator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/onefactormodels/blackkarasinski.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/onefactormodels/gaussian1dmodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/onefactormodels/vasicek.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/position.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/onefactormodels/hullwhite.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/onefactormodels/hullwhite.cpp:38:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        generateArguments();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/onefactormodels/hullwhite.cpp:38:9: note: This constructor of an object of type 'HullWhite' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/onefactormodels/hullwhite.cpp:38:9: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/patterns/observable.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/prices.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/americanpayoffatexpiry.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/americanpayoffathit.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/volatility/garch.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/asian/analytic_cont_geom_av_price.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/twofactormodels/g2.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/twofactormodels/g2.cpp:41:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        generateArguments();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/twofactormodels/g2.cpp:41:9: note: This constructor of an object of type 'G2' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/twofactormodels/g2.cpp:41:9: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/asian/analytic_discr_geom_av_strike.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/asian/mc_discr_arith_av_price.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/asian/mc_discr_arith_av_strike.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/asian/fdblackscholesasianengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/asian/analytic_discr_geom_av_price.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/onefactormodels/gsr.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/asian/mc_discr_geom_av_price.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/barrier/fdblackscholesrebateengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/barrier/discretizedbarrieroption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/barrier/analyticbarrierengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/barrier/analyticbinarybarrierengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/barrier/mcbarrierengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/basket/fd2dblackscholesvanillaengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/barrier/fdblackscholesbarrierengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/basket/kirkengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/barrier/fdhestonbarrierengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/barrier/fdhestonrebateengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/basket/mceuropeanbasketengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/blackcalculator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/blackscholescalculator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/basket/mcamericanbasketengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/bond/discountingbondengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/basket/stulzengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/bond/bondfunctions.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/blackformula.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/capfloor/analyticcapfloorengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/models/shortrate/onefactormodels/markovfunctional.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/capfloor/blackcapfloorengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/money.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/capfloor/bacheliercapfloorengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/capfloor/mchullwhiteengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/capfloor/discretizedcapfloor.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/capfloor/treecapfloorengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/cliquet/mcperformanceengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/cliquet/analyticcliquetengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/greeks.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/cliquet/analyticperformanceengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/capfloor/gaussian1dcapfloorengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/credit/integralcdsengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/credit/midpointcdsengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/lookback/analyticcontinuousfloatinglookback.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/credit/isdacdsengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/lookback/analyticcontinuouspartialfixedlookback.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/lookback/analyticcontinuousfixedlookback.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/inflation/inflationcapfloorengines.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/lookback/analyticcontinuouspartialfloatinglookback.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/swap/treeswapengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/swaption/blackswaptionengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/swap/discountingswapengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/swap/cvaswapengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/swap/discretizedswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/swaption/discretizedswaption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/swaption/basketgeneratingengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/swaption/gaussian1djamshidianswaptionengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/swaption/fdg2swaptionengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/swaption/fdhullwhiteswaptionengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/swaption/jamshidianswaptionengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/analyticbsmhullwhiteengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/swaption/treeswaptionengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/swaption/gaussian1dfloatfloatswaptionengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/analyticdigitalamericanengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/swaption/gaussian1dswaptionengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/analytich1hwengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/swaption/gaussian1dnonstandardswaptionengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/analyticcevengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/analytichestonhullwhiteengine.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/analytichestonhullwhiteengine.cpp:33:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        update();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/analytichestonhullwhiteengine.cpp:33:9: note: This constructor of an object of type 'AnalyticHestonHullWhiteEngine' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/analytichestonhullwhiteengine.cpp:33:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/analytichestonhullwhiteengine.cpp:44:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        update();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/analytichestonhullwhiteengine.cpp:44:9: note: This constructor of an object of type 'AnalyticHestonHullWhiteEngine' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/analytichestonhullwhiteengine.cpp:44:9: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/analyticeuropeanengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/analyticgjrgarchengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/analyticdividendeuropeanengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/batesengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/baroneadesiwhaleyengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/discretizedvanillaoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/coshestonengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/analytichestonengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/fdblackscholesvanillaengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/bjerksundstenslandengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/analyticptdhestonengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/fdbatesvanillaengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/fdsabrvanillaengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/fdcevvanillaengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/fdsimplebsswingengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/hestonexpansionengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/integralengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/fdhestonvanillaengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/fdhestonhullwhitevanillaengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/fdvanillaengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/mchestonhullwhiteengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/processes/batesprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/juquadraticengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/mcdigitalengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/jumpdiffusionengine.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/math/distributions/poissondistribution.hpp:105:5: warning: 1 uninitialized field at the end of the constructor call [clang-analyzer-optin.cplusplus.UninitializedObject]
    }
    ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/distributions/poissondistribution.hpp:49:19: note: uninitialized field 'this->logMu_'
        Real mu_, logMu_;
                  ^
/home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/jumpdiffusionengine.cpp:54:9: note: Taking false branch
        QL_REQUIRE(payoff, "non-striked payoff given");
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/jumpdiffusionengine.cpp:70:29: note: Calling constructor for 'PoissonDistribution'
        PoissonDistribution p(lambda*t);
                            ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/distributions/poissondistribution.hpp:101:9: note: Assuming the condition is false
        QL_REQUIRE(mu_>=0.0,
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:5: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
    ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/distributions/poissondistribution.hpp:101:9: note: Taking false branch
        QL_REQUIRE(mu_>=0.0,
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/distributions/poissondistribution.hpp:104:13: note: Assuming the condition is false
        if (mu_!=0.0) logMu_ = std::log(mu_);
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/distributions/poissondistribution.hpp:104:9: note: Taking false branch
        if (mu_!=0.0) logMu_ = std::log(mu_);
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/distributions/poissondistribution.hpp:105:5: note: 1 uninitialized field at the end of the constructor call
    }
    ^
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/pricingengines/vanilla/mcamericanengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/processes/endeulerdiscretization.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/processes/forwardmeasureprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/processes/eulerdiscretization.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/processes/g2process.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/processes/geometricbrownianprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/processes/blackscholesprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/processes/gsrprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/processes/gjrgarchprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/processes/hullwhiteprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/processes/hybridhestonhullwhiteprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/processes/merton76process.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/processes/ornsteinuhlenbeckprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/processes/squarerootprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/processes/mfstateprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/quotes/eurodollarfuturesquote.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/processes/stochasticprocessarray.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/quotes/forwardvaluequote.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/quotes/forwardswapquote.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/rebatedexercise.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/quotes/futuresconvadjustmentquote.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/quotes/impliedstddevquote.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/processes/jointstochasticprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/quotes/lastfixingquote.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/stochasticprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/credit/defaultdensitystructure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/credit/flathazardrate.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/credit/hazardratestructure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/credit/survivalprobabilitystructure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/defaulttermstructure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/abcd.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/processes/hestonprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/settings.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:41:17: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        switch (this->frequency()) {
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: note: This constructor of an object of type 'MultiplicativePriceSeasonality' has not returned when the virtual method was called
        set(seasonalityBaseDate, frequency, seasonalityFactors);
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: note: Calling 'MultiplicativePriceSeasonality::set'
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:103:23: note: Assuming the condition is false
        for(Size i=0; i<seasonalityFactors.size(); i++) {
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:103:9: note: Loop condition is false. Execution continues on line 106
        for(Size i=0; i<seasonalityFactors.size(); i++) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:107:9: note: Calling 'MultiplicativePriceSeasonality::validate'
        validate();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:41:17: note: Call to virtual function during construction
        switch (this->frequency()) {
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:50:29: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
                QL_REQUIRE(!this->seasonalityFactors().empty(), "no seasonality factors given");
                            ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: note: This constructor of an object of type 'MultiplicativePriceSeasonality' has not returned when the virtual method was called
        set(seasonalityBaseDate, frequency, seasonalityFactors);
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: note: Calling 'MultiplicativePriceSeasonality::set'
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:103:23: note: Assuming the condition is false
        for(Size i=0; i<seasonalityFactors.size(); i++) {
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:103:9: note: Loop condition is false. Execution continues on line 106
        for(Size i=0; i<seasonalityFactors.size(); i++) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:107:9: note: Calling 'MultiplicativePriceSeasonality::validate'
        validate();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:41:9: note: Control jumps to 'case Daily:'  at line 49
        switch (this->frequency()) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:50:29: note: Call to virtual function during construction
                QL_REQUIRE(!this->seasonalityFactors().empty(), "no seasonality factors given");
                            ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:51:30: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
                QL_REQUIRE( (this->seasonalityFactors().size() %
                             ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: note: This constructor of an object of type 'MultiplicativePriceSeasonality' has not returned when the virtual method was called
        set(seasonalityBaseDate, frequency, seasonalityFactors);
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: note: Calling 'MultiplicativePriceSeasonality::set'
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:103:23: note: Assuming the condition is false
        for(Size i=0; i<seasonalityFactors.size(); i++) {
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:103:9: note: Loop condition is false. Execution continues on line 106
        for(Size i=0; i<seasonalityFactors.size(); i++) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:107:9: note: Calling 'MultiplicativePriceSeasonality::validate'
        validate();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:41:9: note: Control jumps to 'case Daily:'  at line 49
        switch (this->frequency()) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:50:28: note: Assuming the condition is true
                QL_REQUIRE(!this->seasonalityFactors().empty(), "no seasonality factors given");
                           ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:50:17: note: Taking false branch
                QL_REQUIRE(!this->seasonalityFactors().empty(), "no seasonality factors given");
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:51:30: note: Call to virtual function during construction
                QL_REQUIRE( (this->seasonalityFactors().size() %
                             ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:52:30: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
                             this->frequency()) == 0,
                             ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: note: This constructor of an object of type 'MultiplicativePriceSeasonality' has not returned when the virtual method was called
        set(seasonalityBaseDate, frequency, seasonalityFactors);
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: note: Calling 'MultiplicativePriceSeasonality::set'
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:103:23: note: Assuming the condition is false
        for(Size i=0; i<seasonalityFactors.size(); i++) {
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:103:9: note: Loop condition is false. Execution continues on line 106
        for(Size i=0; i<seasonalityFactors.size(); i++) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:107:9: note: Calling 'MultiplicativePriceSeasonality::validate'
        validate();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:41:9: note: Control jumps to 'case Daily:'  at line 49
        switch (this->frequency()) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:50:28: note: Assuming the condition is true
                QL_REQUIRE(!this->seasonalityFactors().empty(), "no seasonality factors given");
                           ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:50:17: note: Taking false branch
                QL_REQUIRE(!this->seasonalityFactors().empty(), "no seasonality factors given");
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:52:30: note: Call to virtual function during construction
                             this->frequency()) == 0,
                             ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:53:48: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
                           "For frequency " << this->frequency()
                                               ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: note: This constructor of an object of type 'MultiplicativePriceSeasonality' has not returned when the virtual method was called
        set(seasonalityBaseDate, frequency, seasonalityFactors);
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: note: Calling 'MultiplicativePriceSeasonality::set'
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:103:23: note: Assuming the condition is false
        for(Size i=0; i<seasonalityFactors.size(); i++) {
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:103:9: note: Loop condition is false. Execution continues on line 106
        for(Size i=0; i<seasonalityFactors.size(); i++) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:107:9: note: Calling 'MultiplicativePriceSeasonality::validate'
        validate();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:41:9: note: Control jumps to 'case Daily:'  at line 49
        switch (this->frequency()) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:50:28: note: Assuming the condition is true
                QL_REQUIRE(!this->seasonalityFactors().empty(), "no seasonality factors given");
                           ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:50:17: note: Taking false branch
                QL_REQUIRE(!this->seasonalityFactors().empty(), "no seasonality factors given");
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:51:29: note: Assuming the condition is false
                QL_REQUIRE( (this->seasonalityFactors().size() %
                            ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:51:17: note: Taking true branch
                QL_REQUIRE( (this->seasonalityFactors().size() %
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:53:48: note: Call to virtual function during construction
                           "For frequency " << this->frequency()
                                               ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:107:23: note: expanded from macro 'QL_REQUIRE'
    _ql_msg_stream << message; \
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:54:64: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
                           << " require multiple of " << ((int)this->frequency()) << " factors "
                                                               ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: note: This constructor of an object of type 'MultiplicativePriceSeasonality' has not returned when the virtual method was called
        set(seasonalityBaseDate, frequency, seasonalityFactors);
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: note: Calling 'MultiplicativePriceSeasonality::set'
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:103:23: note: Assuming the condition is false
        for(Size i=0; i<seasonalityFactors.size(); i++) {
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:103:9: note: Loop condition is false. Execution continues on line 106
        for(Size i=0; i<seasonalityFactors.size(); i++) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:107:9: note: Calling 'MultiplicativePriceSeasonality::validate'
        validate();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:41:9: note: Control jumps to 'case Daily:'  at line 49
        switch (this->frequency()) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:50:28: note: Assuming the condition is true
                QL_REQUIRE(!this->seasonalityFactors().empty(), "no seasonality factors given");
                           ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:50:17: note: Taking false branch
                QL_REQUIRE(!this->seasonalityFactors().empty(), "no seasonality factors given");
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:51:29: note: Assuming the condition is false
                QL_REQUIRE( (this->seasonalityFactors().size() %
                            ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:51:17: note: Taking true branch
                QL_REQUIRE( (this->seasonalityFactors().size() %
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:54:64: note: Call to virtual function during construction
                           << " require multiple of " << ((int)this->frequency()) << " factors "
                                                               ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:107:23: note: expanded from macro 'QL_REQUIRE'
    _ql_msg_stream << message; \
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:55:31: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
                           << this->seasonalityFactors().size() << " were given.");
                              ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: note: This constructor of an object of type 'MultiplicativePriceSeasonality' has not returned when the virtual method was called
        set(seasonalityBaseDate, frequency, seasonalityFactors);
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: note: Calling 'MultiplicativePriceSeasonality::set'
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:103:23: note: Assuming the condition is false
        for(Size i=0; i<seasonalityFactors.size(); i++) {
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:103:9: note: Loop condition is false. Execution continues on line 106
        for(Size i=0; i<seasonalityFactors.size(); i++) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:107:9: note: Calling 'MultiplicativePriceSeasonality::validate'
        validate();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:41:9: note: Control jumps to 'case Daily:'  at line 49
        switch (this->frequency()) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:50:28: note: Assuming the condition is true
                QL_REQUIRE(!this->seasonalityFactors().empty(), "no seasonality factors given");
                           ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:50:17: note: Taking false branch
                QL_REQUIRE(!this->seasonalityFactors().empty(), "no seasonality factors given");
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:51:29: note: Assuming the condition is false
                QL_REQUIRE( (this->seasonalityFactors().size() %
                            ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:51:17: note: Taking true branch
                QL_REQUIRE( (this->seasonalityFactors().size() %
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:55:31: note: Call to virtual function during construction
                           << this->seasonalityFactors().size() << " were given.");
                              ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:107:23: note: expanded from macro 'QL_REQUIRE'
    _ql_msg_stream << message; \
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:58:56: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
                QL_FAIL("bad frequency specified: " << this->frequency()
                                                       ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: note: This constructor of an object of type 'MultiplicativePriceSeasonality' has not returned when the virtual method was called
        set(seasonalityBaseDate, frequency, seasonalityFactors);
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: note: Calling 'MultiplicativePriceSeasonality::set'
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:103:23: note: Assuming the condition is false
        for(Size i=0; i<seasonalityFactors.size(); i++) {
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:103:9: note: Loop condition is false. Execution continues on line 106
        for(Size i=0; i<seasonalityFactors.size(); i++) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:107:9: note: Calling 'MultiplicativePriceSeasonality::validate'
        validate();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:41:9: note: Control jumps to the 'default' case at line 57
        switch (this->frequency()) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:58:56: note: Call to virtual function during construction
                QL_FAIL("bad frequency specified: " << this->frequency()
                                                       ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:83:23: note: expanded from macro 'QL_FAIL'
    _ql_msg_stream << message; \
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        set(seasonalityBaseDate, frequency, seasonalityFactors);
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: note: This constructor of an object of type 'MultiplicativePriceSeasonality' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:107:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        validate();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: note: This constructor of an object of type 'MultiplicativePriceSeasonality' has not returned when the virtual method was called
        set(seasonalityBaseDate, frequency, seasonalityFactors);
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:95:9: note: Calling 'MultiplicativePriceSeasonality::set'
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:103:23: note: Assuming the condition is false
        for(Size i=0; i<seasonalityFactors.size(); i++) {
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:103:9: note: Loop condition is false. Execution continues on line 106
        for(Size i=0; i<seasonalityFactors.size(); i++) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/seasonality.cpp:107:9: note: Call to virtual function during construction
        validate();
        ^
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/processes/gsrprocesscore.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/credit/defaultprobabilityhelpers.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/credit/defaultprobabilityhelpers.cpp:52:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/credit/defaultprobabilityhelpers.cpp:223:7: note: Calling constructor for 'CdsHelper'
    : CdsHelper(upfront, tenor, settlementDays, calendar,
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/credit/defaultprobabilityhelpers.cpp:52:9: note: This constructor of an object of type 'CdsHelper' has not returned when the virtual method was called
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/credit/defaultprobabilityhelpers.cpp:52:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/credit/defaultprobabilityhelpers.cpp:78:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/credit/defaultprobabilityhelpers.cpp:251:7: note: Calling constructor for 'CdsHelper'
    : CdsHelper(upfrontSpread, tenor, settlementDays, calendar,
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/credit/defaultprobabilityhelpers.cpp:78:9: note: This constructor of an object of type 'CdsHelper' has not returned when the virtual method was called
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/credit/defaultprobabilityhelpers.cpp:78:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/credit/defaultprobabilityhelpers.cpp:229:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/credit/defaultprobabilityhelpers.cpp:229:9: note: This constructor of an object of type 'UpfrontCdsHelper' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/credit/defaultprobabilityhelpers.cpp:229:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/credit/defaultprobabilityhelpers.cpp:257:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/credit/defaultprobabilityhelpers.cpp:257:9: note: This constructor of an object of type 'UpfrontCdsHelper' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/credit/defaultprobabilityhelpers.cpp:257:9: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/atmadjustedsmilesection.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/capfloor/capfloortermvolatilitystructure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/atmsmilesection.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflationtermstructure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/capfloor/constantcapfloortermvol.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/inflation/inflationhelpers.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/equityfx/andreasenhugelocalvoladapter.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/equityfx/andreasenhugevolatilityadapter.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/equityfx/blackvariancecurve.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/abcdcalibration.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/equityfx/blackvoltermstructure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/equityfx/blackvariancesurface.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/equityfx/fixedlocalvolsurface.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/equityfx/localvoltermstructure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/equityfx/localvolsurface.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/flatsmilesection.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/inflation/constantcpivolatility.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/equityfx/gridmodellocalvolsurface.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/equityfx/gridmodellocalvolsurface.cpp:59:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        generateArguments();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/equityfx/gridmodellocalvolsurface.cpp:47:24: note: Assuming the condition is false
        for (Size i=1; i < strikes_.size(); ++i) {
                       ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/equityfx/gridmodellocalvolsurface.cpp:47:9: note: Loop condition is false. Execution continues on line 52
        for (Size i=1; i < strikes_.size(); ++i) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/equityfx/gridmodellocalvolsurface.cpp:55:24: note: Assuming the condition is false
        for (Size i=0; i < dates.size(); ++i) {
                       ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/equityfx/gridmodellocalvolsurface.cpp:55:9: note: Loop condition is false. Execution continues on line 59
        for (Size i=0; i < dates.size(); ++i) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/equityfx/gridmodellocalvolsurface.cpp:59:9: note: This constructor of an object of type 'GridModelLocalVolSurface' has not returned when the virtual method was called
        generateArguments();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/equityfx/gridmodellocalvolsurface.cpp:59:9: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/inflation/cpivolatilitystructure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/capfloor/capfloortermvolcurve.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/inflation/yoyinflationoptionletvolatilitystructure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/equityfx/hestonblackvolsurface.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/gaussian1dsmilesection.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/optionlet/constantoptionletvol.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/optionlet/optionletstripper.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/optionlet/optionletvolatilitystructure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/optionlet/spreadedoptionletvol.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/sabr.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/optionlet/optionletstripper1.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/optionlet/optionletstripper2.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/optionlet/strippedoptionlet.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/sabrsmilesection.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:55:18: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
            i += shift();
                 ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:39:20: note: Assuming the condition is true
        QL_REQUIRE(source->volatilityType() == ShiftedLognormal,
                   ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:39:9: note: Taking false branch
        QL_REQUIRE(source->volatilityType() == ShiftedLognormal,
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:55:18: note: This constructor of an object of type 'KahaleSmileSection' has not returned when the virtual method was called
            i += shift();
                 ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:55:18: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:58:15: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        f_ += shift();
              ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:39:20: note: Assuming the condition is true
        QL_REQUIRE(source->volatilityType() == ShiftedLognormal,
                   ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:39:9: note: Taking false branch
        QL_REQUIRE(source->volatilityType() == ShiftedLognormal,
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:58:15: note: This constructor of an object of type 'KahaleSmileSection' has not returned when the virtual method was called
        f_ += shift();
              ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:58:15: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:92:30: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
                        k1 - shift() + gap_ / 2.0, Option::Call, 1.0, gap_);
                             ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:39:20: note: Assuming the condition is true
        QL_REQUIRE(source->volatilityType() == ShiftedLognormal,
                   ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:39:9: note: Taking false branch
        QL_REQUIRE(source->volatilityType() == ShiftedLognormal,
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:60:9: note: This constructor of an object of type 'KahaleSmileSection' has not returned when the virtual method was called
        compute();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:60:9: note: Calling 'KahaleSmileSection::compute'
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:88:21: note: Assuming field 'interpolate_' is false
                if (interpolate_)
                    ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:88:17: note: Taking false branch
                if (interpolate_)
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:92:30: note: Call to virtual function during construction
                        k1 - shift() + gap_ / 2.0, Option::Call, 1.0, gap_);
                             ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:109:53: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
                Real dig = digitalOptionPrice((k1 - shift()) / 2.0, Option::Call,
                                                    ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:39:20: note: Assuming the condition is true
        QL_REQUIRE(source->volatilityType() == ShiftedLognormal,
                   ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:39:9: note: Taking false branch
        QL_REQUIRE(source->volatilityType() == ShiftedLognormal,
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:60:9: note: This constructor of an object of type 'KahaleSmileSection' has not returned when the virtual method was called
        compute();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:60:9: note: Calling 'KahaleSmileSection::compute'
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:88:21: note: Assuming field 'interpolate_' is true
                if (interpolate_)
                    ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:88:17: note: Taking true branch
                if (interpolate_)
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:109:53: note: Call to virtual function during construction
                Real dig = digitalOptionPrice((k1 - shift()) / 2.0, Option::Call,
                                                    ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.hpp:122:57: warning: 2 uninitialized fields at the end of the constructor call [clang-analyzer-optin.cplusplus.UninitializedObject]
                : k1_(k1), c0_(c0), c1_(c1), c1p_(c1p) {}
                                                        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.hpp:134:26: note: uninitialized field 'this->f_'
            mutable Real f_, b_;
                         ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.hpp:134:30: note: uninitialized field 'this->b_'
            mutable Real f_, b_;
                             ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:39:20: note: Assuming the condition is true
        QL_REQUIRE(source->volatilityType() == ShiftedLognormal,
                   ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:39:9: note: Taking false branch
        QL_REQUIRE(source->volatilityType() == ShiftedLognormal,
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:60:9: note: Calling 'KahaleSmileSection::compute'
        compute();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:88:21: note: Assuming field 'interpolate_' is true
                if (interpolate_)
                    ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:88:17: note: Taking true branch
                if (interpolate_)
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.cpp:97:26: note: Calling constructor for 'sHelper1'
                sHelper1 sh1(k1, c0, c1, c1p);
                         ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/kahalesmilesection.hpp:122:57: note: 2 uninitialized fields at the end of the constructor call
                : k1_(k1), c0_(c0), c1_(c1), c1p_(c1p) {}
                                                        ^
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/smilesection.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/smilesection.cpp:58:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeExerciseTime();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/smilesection.cpp:53:13: note: Field 'isFloating_' is false
        if (isFloating_) {
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/smilesection.cpp:53:9: note: Taking false branch
        if (isFloating_) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/smilesection.cpp:58:9: note: This constructor of an object of type 'SmileSection' has not returned when the virtual method was called
        initializeExerciseTime();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/smilesection.cpp:58:9: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/spreadedsmilesection.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/capfloor/capfloortermvolsurface.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bicubicsplineinterpolation.hpp:56:17: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
                calculate();
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/capfloor/capfloortermvolsurface.cpp:145:24: note: Assuming 'i' is >= field 'nOptionTenors_'
        for (Size i=0; i<nOptionTenors_; ++i) {
                       ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/capfloor/capfloortermvolsurface.cpp:145:9: note: Loop condition is false. Execution continues on line 151
        for (Size i=0; i<nOptionTenors_; ++i) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/capfloor/capfloortermvolsurface.cpp:151:9: note: Calling 'CapFloorTermVolSurface::interpolate'
        interpolate();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/capfloor/capfloortermvolsurface.cpp:188:26: note: Calling constructor for 'BicubicSpline'
        interpolation_ = BicubicSpline(strikes_.begin(),
                         ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bicubicsplineinterpolation.hpp:171:23: note: Calling constructor for 'BicubicSplineImpl<__gnu_cxx::__normal_iterator<double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double *, std::vector<double, std::allocator<double> > >, QuantLib::Matrix>'
                  new detail::BicubicSplineImpl<I1,I2,M>(xBegin, xEnd,
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bicubicsplineinterpolation.hpp:56:17: note: This constructor of an object of type 'BicubicSplineImpl' has not returned when the virtual method was called
                calculate();
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bicubicsplineinterpolation.hpp:56:17: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/smilesectionutils.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/spreadedswaptionvol.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/sabrinterpolatedsmilesection.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/optionlet/strippedoptionletadapter.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionconstantvol.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/gaussian1dswaptionvolatility.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/cmsmarket.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/cmsmarket.cpp:116:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        performCalculations();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/cmsmarket.cpp:74:20: note: Assuming the condition is true
        QL_REQUIRE(2 * nSwapIndexes_ == bidAskSpreads[0].size(),
                   ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/cmsmarket.cpp:74:9: note: Taking false branch
        QL_REQUIRE(2 * nSwapIndexes_ == bidAskSpreads[0].size(),
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/cmsmarket.cpp:78:20: note: Assuming the condition is true
        QL_REQUIRE(nExercise_ == bidAskSpreads.size(),
                   ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/cmsmarket.cpp:78:9: note: Taking false branch
        QL_REQUIRE(nExercise_ == bidAskSpreads.size(),
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/cmsmarket.cpp:81:20: note: Assuming the condition is true
        QL_REQUIRE(nSwapIndexes_ == pricers.size(),
                   ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/cmsmarket.cpp:81:9: note: Taking false branch
        QL_REQUIRE(nSwapIndexes_ == pricers.size(),
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/cmsmarket.cpp:85:24: note: Assuming 'j' is >= field 'nSwapIndexes_'
        for (Size j=0; j<nSwapIndexes_; ++j) {
                       ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/cmsmarket.cpp:85:9: note: Loop condition is false. Execution continues on line 96
        for (Size j=0; j<nSwapIndexes_; ++j) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/cmsmarket.cpp:97:24: note: Assuming 'i' is >= field 'nExercise_'
        for (Size i=0; i<nExercise_; ++i) {
                       ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/cmsmarket.cpp:97:9: note: Loop condition is false. Execution continues on line 116
        for (Size i=0; i<nExercise_; ++i) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/cmsmarket.cpp:116:9: note: This constructor of an object of type 'CmsMarket' has not returned when the virtual method was called
        performCalculations();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/cmsmarket.cpp:116:9: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolstructure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/voltermstructure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvoldiscrete.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolcube.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/flatforward.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/forwardstructure.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/forwardstructure.cpp:55:9: warning: Variable 'i' with floating point type 'QuantLib::Time' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (Time i=dt; i<t; i+=dt)
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/forwardstructure.cpp:55:9: note: Variable 'i' with floating point type 'QuantLib::Time' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/bondhelpers.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/nonlinearfittingmethods.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/zeroyieldstructure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolcube2.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:44:17: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
                calculate();
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolcube2.cpp:51:24: note: Assuming 'i' is < field 'nStrikes_'
        for (Size i=0; i<nStrikes_; i++) 
                       ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolcube2.cpp:51:9: note: Loop condition is true.  Entering loop body
        for (Size i=0; i<nStrikes_; i++) 
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolcube2.cpp:52:28: note: Assuming 'j' is >= field 'nOptionTenors_'
            for (Size j=0; j<nOptionTenors_; j++)
                           ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolcube2.cpp:52:13: note: Loop condition is false. Execution continues on line 51
            for (Size j=0; j<nOptionTenors_; j++)
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolcube2.cpp:51:24: note: Assuming 'i' is >= field 'nStrikes_'
        for (Size i=0; i<nStrikes_; i++) 
                       ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolcube2.cpp:51:9: note: Loop condition is false. Execution continues on line 58
        for (Size i=0; i<nStrikes_; i++) 
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolcube2.cpp:58:9: note: Loop condition is true.  Entering loop body
        for (Size i=0; i<nStrikes_; i++) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolcube2.cpp:59:42: note: Calling constructor for 'BilinearInterpolation'
            volSpreadsInterpolator_[i] = BilinearInterpolation(
                                         ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:80:23: note: Calling constructor for 'BilinearInterpolationImpl<__gnu_cxx::__normal_iterator<double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double *, std::vector<double, std::allocator<double> > >, QuantLib::Matrix>'
                  new detail::BilinearInterpolationImpl<I1,I2,M>(xBegin, xEnd,
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:44:17: note: This constructor of an object of type 'BilinearInterpolationImpl' has not returned when the virtual method was called
                calculate();
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:44:17: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/businessdayconvention.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/fittedbonddiscountcurve.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/oisratehelper.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/oisratehelper.cpp:57:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/oisratehelper.cpp:57:9: note: This constructor of an object of type 'OISRateHelper' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/oisratehelper.cpp:57:9: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yieldtermstructure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/argentina.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/cmsmarketcalibration.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/australia.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/bespokecalendar.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/botswana.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/brazil.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/canada.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/czechrepublic.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendar.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/denmark.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/finland.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/asx.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/china.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/france.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/germany.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/hungary.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/hongkong.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/iceland.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/india.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/indonesia.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/italy.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/mexico.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/japan.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/newzealand.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/norway.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/poland.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/israel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/romania.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:303:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:303:9: note: This constructor of an object of type 'DepositRateHelper' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:303:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:318:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:318:9: note: This constructor of an object of type 'DepositRateHelper' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:318:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:325:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:325:9: note: This constructor of an object of type 'DepositRateHelper' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:325:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:332:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:332:9: note: This constructor of an object of type 'DepositRateHelper' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:332:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:399:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:387:20: note: Assuming 'monthsToEnd' is > 'monthsToStart'
        QL_REQUIRE(monthsToEnd>monthsToStart,
                   ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:387:9: note: Taking false branch
        QL_REQUIRE(monthsToEnd>monthsToStart,
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:399:9: note: This constructor of an object of type 'FraRateHelper' has not returned when the virtual method was called
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:399:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:427:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:415:20: note: Assuming 'monthsToEnd' is > 'monthsToStart'
        QL_REQUIRE(monthsToEnd>monthsToStart,
                   ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:7: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:415:9: note: Taking false branch
        QL_REQUIRE(monthsToEnd>monthsToStart,
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:427:9: note: This constructor of an object of type 'FraRateHelper' has not returned when the virtual method was called
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:427:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:446:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:446:9: note: This constructor of an object of type 'FraRateHelper' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:446:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:463:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:463:9: note: This constructor of an object of type 'FraRateHelper' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:463:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:487:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:487:9: note: This constructor of an object of type 'FraRateHelper' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:487:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:511:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:511:9: note: This constructor of an object of type 'FraRateHelper' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:511:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:528:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:528:9: note: This constructor of an object of type 'FraRateHelper' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:528:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:545:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:545:9: note: This constructor of an object of type 'FraRateHelper' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:545:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:662:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:662:9: note: This constructor of an object of type 'SwapRateHelper' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:662:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:704:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:689:13: note: Assuming the condition is false
        if (settlementDays_==Null<Natural>())
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:689:9: note: Taking false branch
        if (settlementDays_==Null<Natural>())
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:704:9: note: This constructor of an object of type 'SwapRateHelper' has not returned when the virtual method was called
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:704:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:736:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:736:9: note: This constructor of an object of type 'SwapRateHelper' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:736:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:778:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:763:13: note: Assuming the condition is false
        if (settlementDays_==Null<Natural>())
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:763:9: note: Taking false branch
        if (settlementDays_==Null<Natural>())
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:778:9: note: This constructor of an object of type 'SwapRateHelper' has not returned when the virtual method was called
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:778:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:893:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:893:9: note: This constructor of an object of type 'BMASwapRateHelper' has not returned when the virtual method was called
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:893:9: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:996:9: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:991:9: note: Taking true branch
        if (tradingCalendar_.empty())
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:996:9: note: This constructor of an object of type 'FxSwapRateHelper' has not returned when the virtual method was called
        initializeDates();
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/yield/ratehelpers.cpp:996:9: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/russia.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/slovakia.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/singapore.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/southafrica.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/sweden.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/saudiarabia.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/switzerland.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/target.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/taiwan.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/southkorea.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/turkey.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/ukraine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/thailand.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/unitedkingdom.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/weekendsonly.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/dategenerationrule.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/daycounters/actual365fixed.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/jointcalendar.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/daycounters/simpledaycounter.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/daycounters/thirty360.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/calendars/unitedstates.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/frequency.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/daycounters/business252.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/timeunit.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/period.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/weekday.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/timegrid.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/schedule.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/utilities/dataformatters.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/version.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/ecb.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/utilities/tracing.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/imm.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/daycounters/actualactual.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolmatrix.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:44:17: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
                calculate();
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolmatrix.cpp:275:24: note: Assuming the condition is false
        for (Size i=0; i<vols.rows(); ++i) {
                       ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolmatrix.cpp:275:9: note: Loop condition is false. Execution continues on line 284
        for (Size i=0; i<vols.rows(); ++i) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolmatrix.cpp:284:13: note: Assuming 'flatExtrapolation' is false
        if (flatExtrapolation) {
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolmatrix.cpp:284:9: note: Taking false branch
        if (flatExtrapolation) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolmatrix.cpp:294:30: note: Calling constructor for 'BilinearInterpolation'
            interpolation_ = BilinearInterpolation(
                             ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:80:23: note: Calling constructor for 'BilinearInterpolationImpl<__gnu_cxx::__normal_iterator<double *, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double *, std::vector<double, std::allocator<double> > >, QuantLib::Matrix>'
                  new detail::BilinearInterpolationImpl<I1,I2,M>(xBegin, xEnd,
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:44:17: note: This constructor of an object of type 'BilinearInterpolationImpl' has not returned when the virtual method was called
                calculate();
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/bilinearinterpolation.hpp:44:17: note: Call to virtual function during construction
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/flatextrapolation2d.hpp:47:17: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
                calculate();
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolmatrix.cpp:275:24: note: Assuming the condition is false
        for (Size i=0; i<vols.rows(); ++i) {
                       ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolmatrix.cpp:275:9: note: Loop condition is false. Execution continues on line 284
        for (Size i=0; i<vols.rows(); ++i) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolmatrix.cpp:284:13: note: Assuming 'flatExtrapolation' is true
        if (flatExtrapolation) {
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolmatrix.cpp:284:9: note: Taking true branch
        if (flatExtrapolation) {
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/termstructures/volatility/swaption/swaptionvolmatrix.cpp:286:17: note: Calling constructor for 'FlatExtrapolator2D'
                FlatExtrapolator2D(std::make_shared<BilinearInterpolation>(
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/flatextrapolation2d.hpp:40:23: note: Calling constructor for 'FlatExtrapolator2DImpl'
                  new FlatExtrapolator2DImpl(decoratedInterpolation));
                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/flatextrapolation2d.hpp:47:17: note: This constructor of an object of type 'FlatExtrapolator2DImpl' has not returned when the virtual method was called
                calculate();
                ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/interpolations/flatextrapolation2d.hpp:47:17: note: Call to virtual function during construction
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/Examples/Bonds/Bonds.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/Examples/CallableBonds/CallableBonds.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/Examples/BermudanSwaption/BermudanSwaption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/Examples/CVAIRS/CVAIRS.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/Examples/BasketLosses/BasketLosses.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/utilities/dataparsers.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/Examples/CDS/CDS.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/Examples/FittedBondCurve/FittedBondCurve.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/Examples/ConvertibleBonds/ConvertibleBonds.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/Examples/DiscreteHedging/DiscreteHedging.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/Examples/EquityOption/EquityOption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/Examples/MarketModels/MarketModels.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/Examples/MultidimIntegral/MultidimIntegral.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/Examples/FRA/FRA.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/Examples/LatentModel/LatentModel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/main.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/Examples/Repo/Repo.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/Examples/Replication/Replication.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/Examples/Gaussian1dModels/Gaussian1dModels.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/Examples/GlobalOptimizer/GlobalOptimizer.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/quantlibbenchmark.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/ql/time/date.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/Examples/MulticurveBootstrapping/MulticurveBootstrapping.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/batesmodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/convertiblebonds.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/basketoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/fdheston.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdheston.cpp:52:12: warning: Excessive padding in 'struct (anonymous namespace)::NewBarrierOptionData' (8 padding bytes, where 0 is optimal). 
Optimal fields order: 
barrier, 
rebate, 
strike, 
s, 
q, 
r, 
t, 
v, 
barrierType, 
type, 
consider reordering the fields or adding explicit padding members [clang-analyzer-optin.performance.Padding]
    struct NewBarrierOptionData {
           ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdheston.cpp:52:12: note: Excessive padding in 'struct (anonymous namespace)::NewBarrierOptionData' (8 padding bytes, where 0 is optimal). Optimal fields order: barrier, rebate, strike, s, q, r, t, v, barrierType, type, consider reordering the fields or adding explicit padding members
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdheston.cpp:877:9: warning: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (Real x = 99; x < 101.001; x += 0.1) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdheston.cpp:877:9: note: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/digitaloption.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/digitaloption.cpp:59:12: warning: Excessive padding in 'struct (anonymous namespace)::DigitalOptionData' (11 padding bytes, where 3 is optimal). 
Optimal fields order: 
strike, 
s, 
q, 
r, 
t, 
v, 
result, 
tol, 
type, 
knockin, 
consider reordering the fields or adding explicit padding members [clang-analyzer-optin.performance.Padding]
    struct DigitalOptionData {
           ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/digitaloption.cpp:59:12: note: Excessive padding in 'struct (anonymous namespace)::DigitalOptionData' (11 padding bytes, where 3 is optimal). Optimal fields order: strike, s, q, r, t, v, result, tol, type, knockin, consider reordering the fields or adding explicit padding members
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/americanoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/marketmodel_smm.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/barrieroption.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/barrieroption.cpp:145:12: warning: Excessive padding in 'struct (anonymous namespace)::BarrierFxOptionData' (8 padding bytes, where 0 is optimal). 
Optimal fields order: 
barrier, 
rebate, 
strike, 
s, 
q, 
r, 
t, 
vol25Put, 
volAtm, 
vol25Call, 
v, 
result, 
tol, 
barrierType, 
type, 
consider reordering the fields or adding explicit padding members [clang-analyzer-optin.performance.Padding]
    struct BarrierFxOptionData {
           ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/barrieroption.cpp:145:12: note: Excessive padding in 'struct (anonymous namespace)::BarrierFxOptionData' (8 padding bytes, where 0 is optimal). Optimal fields order: barrier, rebate, strike, s, q, r, t, vol25Put, volAtm, vol25Call, v, result, tol, barrierType, type, consider reordering the fields or adding explicit padding members
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/jumpdiffusion.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/marketmodel_cms.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/dividendoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/asianoptions.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/asianoptions.cpp:516:12: warning: Excessive padding in 'struct (anonymous namespace)::DiscreteAverageData' (11 padding bytes, where 3 is optimal). 
Optimal fields order: 
underlying, 
strike, 
dividendYield, 
riskFreeRate, 
first, 
length, 
fixings, 
volatility, 
result, 
type, 
controlVariate, 
consider reordering the fields or adding explicit padding members [clang-analyzer-optin.performance.Padding]
    struct DiscreteAverageData {
           ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/asianoptions.cpp:516:12: note: Excessive padding in 'struct (anonymous namespace)::DiscreteAverageData' (11 padding bytes, where 3 is optimal). Optimal fields order: underlying, strike, dividendYield, riskFreeRate, first, length, fixings, volatility, result, type, controlVariate, consider reordering the fields or adding explicit padding members
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/utilities.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/riskstats.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/lowdiscrepancysequences.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/amortizingbond.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/array.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/europeanoption.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/europeanoption.cpp:1710:5: warning: Variable 'theta' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real theta = 0.2; theta < 0.81; theta+=0.1) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/europeanoption.cpp:1710:5: note: Variable 'theta' with floating point type 'QuantLib::Real' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/shortratemodels.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/autocovariances.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/andreasenhugevolatilityinterpl.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/andreasenhugevolatilityinterpl.cpp:584:9: warning: Variable 'm' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (Real m = -0.7; m < 0.7; m += 0.05) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/andreasenhugevolatilityinterpl.cpp:584:9: note: Variable 'm' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/andreasenhugevolatilityinterpl.cpp:795:5: warning: Variable 'strike' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real strike = 0.02; strike < 0.06; strike += 0.001) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/andreasenhugevolatilityinterpl.cpp:795:5: note: Variable 'strike' with floating point type 'QuantLib::Real' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/basismodels.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:170:9: warning: Variable 'moneyness' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (Real moneyness = -1.0; moneyness < 2.0; moneyness += 1.0) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:170:9: note: Variable 'moneyness' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:187:5: warning: Variable 'sigma' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real sigma = 0.1; sigma < 0.7; sigma += 0.2) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:187:5: note: Variable 'sigma' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1363:5: warning: Variable 'strike' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real strike=40; strike < 190; strike+=20) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1363:5: note: Variable 'strike' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1388:5: warning: Variable 'strike' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real strike=40; strike < 190; strike+=10) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1388:5: note: Variable 'strike' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1513:30: warning: The right operand of '>' is a garbage value due to array index out of bounds [clang-analyzer-core.UndefinedBinaryOperatorResult]
                if (relError > tol[k]) {
                             ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1494:20: note: Assuming the condition is true
    for (Size i=0; i < strikes.size(); ++i) {
                   ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1494:5: note: Loop condition is true.  Entering loop body
    for (Size i=0; i < strikes.size(); ++i) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1497:24: note: Assuming the condition is true
        for (Size j=0; j < types.size(); ++j) {
                       ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1497:9: note: Loop condition is true.  Entering loop body
        for (Size j=0; j < types.size(); ++j) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1500:28: note: Assuming the condition is true
            for (Size k=0; k < engines.size(); ++k) {
                           ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1500:13: note: Loop condition is true.  Entering loop body
            for (Size k=0; k < engines.size(); ++k) {
            ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1513:21: note: Assuming the condition is false
                if (relError > tol[k]) {
                    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1513:17: note: Taking false branch
                if (relError > tol[k]) {
                ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1500:28: note: Assuming the condition is true
            for (Size k=0; k < engines.size(); ++k) {
                           ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1500:13: note: Loop condition is true.  Entering loop body
            for (Size k=0; k < engines.size(); ++k) {
            ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1513:21: note: Assuming the condition is false
                if (relError > tol[k]) {
                    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1513:17: note: Taking false branch
                if (relError > tol[k]) {
                ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1500:48: note: The value 2 is assigned to 'k'
            for (Size k=0; k < engines.size(); ++k) {
                                               ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1500:28: note: Assuming the condition is true
            for (Size k=0; k < engines.size(); ++k) {
                           ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1500:13: note: Loop condition is true.  Entering loop body
            for (Size k=0; k < engines.size(); ++k) {
            ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1513:30: note: The right operand of '>' is a garbage value due to array index out of bounds
                if (relError > tol[k]) {
                             ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1889:5: warning: Variable 't' with floating point type 'QuantLib::Time' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Time t=0.01; t < 41.0; t+=t) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1889:5: note: Variable 't' with floating point type 'QuantLib::Time' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:2242:9: warning: Variable 'u' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (Real u =0.001; u < 10; u*=1.05) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:2242:9: note: Variable 'u' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:2364:5: warning: Variable 'r' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real r = 0.1; r < 4; r+=0.25) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:2364:5: note: Variable 'r' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:2365:9: warning: Variable 'phi' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (Real phi = 0; phi < 360; phi+=60) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:2365:9: note: Variable 'phi' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:2366:13: warning: Variable 't' with floating point type 'QuantLib::Time' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
            for (Time t=0.1; t <= 1.0; t+=0.3) {
            ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:2366:13: note: Variable 't' with floating point type 'QuantLib::Time' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/assetswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/batesmodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/americanoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/basketoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/bermudanswaption.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/bermudanswaption.cpp:252:5: warning: Variable 's' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real s=0.5; s<1.51; s+=0.25) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/bermudanswaption.cpp:252:5: note: Variable 's' with floating point type 'QuantLib::Real' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/binaryoption.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/binaryoption.cpp:74:12: warning: Excessive padding in 'struct (anonymous namespace)::BinaryOptionData' (8 padding bytes, where 0 is optimal). 
Optimal fields order: 
barrier, 
cash, 
strike, 
s, 
q, 
r, 
t, 
v, 
result, 
tol, 
barrierType, 
type, 
consider reordering the fields or adding explicit padding members [clang-analyzer-optin.performance.Padding]
    struct BinaryOptionData {
           ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/binaryoption.cpp:74:12: note: Excessive padding in 'struct (anonymous namespace)::BinaryOptionData' (8 padding bytes, where 0 is optimal). Optimal fields order: barrier, cash, strike, s, q, r, t, v, result, tol, barrierType, type, consider reordering the fields or adding explicit padding members
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/blackformula.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/blackformula.cpp:182:5: warning: Variable 's' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real s=0.17; s < 2.9; s+=0.01) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/blackformula.cpp:182:5: note: Variable 's' with floating point type 'QuantLib::Real' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/businessdayconventions.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/businessdayconventions.cpp:30:12: warning: Excessive padding in 'struct (anonymous namespace)::SingleCase' (11 padding bytes, where 3 is optimal). 
Optimal fields order: 
start, 
result, 
calendar, 
convention, 
period, 
endOfMonth, 
consider reordering the fields or adding explicit padding members [clang-analyzer-optin.performance.Padding]
    struct SingleCase {
           ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/businessdayconventions.cpp:30:12: note: Excessive padding in 'struct (anonymous namespace)::SingleCase' (11 padding bytes, where 3 is optimal). Optimal fields order: start, result, calendar, convention, period, endOfMonth, consider reordering the fields or adding explicit padding members
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/quantooption.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/quantooption.cpp:198:12: warning: Excessive padding in 'struct (anonymous namespace)::QuantoDoubleBarrierOptionData' (8 padding bytes, where 0 is optimal). 
Optimal fields order: 
barrier_lo, 
barrier_hi, 
rebate, 
s, 
strike, 
q, 
r, 
t, 
v, 
fxr, 
fxv, 
corr, 
result, 
tol, 
barrierType, 
type, 
consider reordering the fields or adding explicit padding members [clang-analyzer-optin.performance.Padding]
    struct QuantoDoubleBarrierOptionData {
           ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/quantooption.cpp:198:12: note: Excessive padding in 'struct (anonymous namespace)::QuantoDoubleBarrierOptionData' (8 padding bytes, where 0 is optimal). Optimal fields order: barrier_lo, barrier_hi, rebate, s, strike, q, r, t, v, fxr, fxv, corr, result, tol, barrierType, type, consider reordering the fields or adding explicit padding members
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/brownianbridge.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/capflooredcoupon.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/blackdeltacalculator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:146:9: warning: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (Real x = xMin; x < 0.0; x += 0.1) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:146:9: note: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:264:5: warning: Variable 'j' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real start = -1.9, j = 0; j < 2; start += 0.2, j++) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:264:5: note: Variable 'j' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:2057:5: warning: Variable 'k' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (; k < 1.004 * strike; k += 0.0001 * strike) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:2057:5: note: Variable 'k' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:2169:9: warning: Variable 'z' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (Real z = x[i] - 100 * QL_EPSILON; z < x[i] + 100 * QL_EPSILON; z += 2 * QL_EPSILON) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:2169:9: note: Variable 'z' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:2200:5: warning: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real x = -1.0; x <= 0.9; x += 0.01) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:2200:5: note: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:2233:5: warning: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real x = -1.0; x <= 1.0; x += 0.03) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:2233:5: note: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/cashflows.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/calendars.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/cdsoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/chooseroption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/bonds.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/cdo.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/barrieroption.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/barrieroption.cpp:145:12: warning: Excessive padding in 'struct (anonymous namespace)::BarrierFxOptionData' (8 padding bytes, where 0 is optimal). 
Optimal fields order: 
barrier, 
rebate, 
strike, 
s, 
q, 
r, 
t, 
vol25Put, 
volAtm, 
vol25Call, 
v, 
result, 
tol, 
barrierType, 
type, 
consider reordering the fields or adding explicit padding members [clang-analyzer-optin.performance.Padding]
    struct BarrierFxOptionData {
           ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/barrieroption.cpp:145:12: note: Excessive padding in 'struct (anonymous namespace)::BarrierFxOptionData' (8 padding bytes, where 0 is optimal). Optimal fields order: barrier, rebate, strike, s, q, r, t, vol25Put, volAtm, vol25Call, v, result, tol, barrierType, type, consider reordering the fields or adding explicit padding members
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/commodityunitofmeasure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/catbonds.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/compiledboostversion.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/capfloor.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/asianoptions.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/asianoptions.cpp:516:12: warning: Excessive padding in 'struct (anonymous namespace)::DiscreteAverageData' (11 padding bytes, where 3 is optimal). 
Optimal fields order: 
underlying, 
strike, 
dividendYield, 
riskFreeRate, 
first, 
length, 
fixings, 
volatility, 
result, 
type, 
controlVariate, 
consider reordering the fields or adding explicit padding members [clang-analyzer-optin.performance.Padding]
    struct DiscreteAverageData {
           ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/asianoptions.cpp:516:12: note: Excessive padding in 'struct (anonymous namespace)::DiscreteAverageData' (11 padding bytes, where 3 is optimal). Optimal fields order: underlying, strike, dividendYield, riskFreeRate, first, length, fixings, volatility, result, type, controlVariate, consider reordering the fields or adding explicit padding members
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/covariance.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/creditriskplus.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/cms.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/cms.cpp:406:5: warning: Variable 'strike' with floating point type 'QuantLib::Rate' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Rate strike = .02; strike<.12; strike+=0.05) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/cms.cpp:406:5: note: Variable 'strike' with floating point type 'QuantLib::Rate' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/cmsspread.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/creditdefaultswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/curvestates.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/cliquetoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/dates.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/compoundoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/defaultprobabilitycurves.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/convertiblebonds.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/daycounters.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp
/home/zzy/Documents/Cpp/QuantLib/ql/math/distributions/poissondistribution.hpp:105:5: warning: 1 uninitialized field at the end of the constructor call [clang-analyzer-optin.cplusplus.UninitializedObject]
    }
    ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/distributions/poissondistribution.hpp:49:19: note: uninitialized field 'this->logMu_'
        Real mu_, logMu_;
                  ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:340:5: note: Loop condition is true.  Entering loop body
    for (Real mean=0.0; mean<=10.0; mean+=0.5) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:342:29: note: Calling constructor for 'PoissonDistribution'
        PoissonDistribution pdf(mean);
                            ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/distributions/poissondistribution.hpp:101:9: note: Assuming the condition is false
        QL_REQUIRE(mu_>=0.0,
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:105:5: note: expanded from macro 'QL_REQUIRE'
if (!(condition)) { \
    ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/distributions/poissondistribution.hpp:101:9: note: Taking false branch
        QL_REQUIRE(mu_>=0.0,
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/errors.hpp:104:39: note: expanded from macro 'QL_REQUIRE'
#define QL_REQUIRE(condition,message) \
                                      ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/distributions/poissondistribution.hpp:104:13: note: Assuming the condition is false
        if (mu_!=0.0) logMu_ = std::log(mu_);
            ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/distributions/poissondistribution.hpp:104:9: note: Taking false branch
        if (mu_!=0.0) logMu_ = std::log(mu_);
        ^
/home/zzy/Documents/Cpp/QuantLib/ql/math/distributions/poissondistribution.hpp:105:5: note: 1 uninitialized field at the end of the constructor call
    }
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:340:5: warning: Variable 'mean' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real mean=0.0; mean<=10.0; mean+=0.5) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:340:5: note: Variable 'mean' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:377:5: warning: Variable 'mean' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real mean=0.0; mean<=10.0; mean+=0.5) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:377:5: note: Variable 'mean' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:608:2: warning: Variable 'rho' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (Real rho = -1.0; rho < 1.01; rho += 0.25) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:608:2: note: Variable 'rho' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:615:3: warning: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
                for (Real x = -10; x < 10.1; x += 0.25) {
                ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:615:3: note: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:616:4: warning: Variable 'y' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
                        for (Real y = -10; y < 10.1; y += 0.25) {
                        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:616:4: note: Variable 'y' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:669:5: warning: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real x=-3.0; x < 3.0; x+=0.1) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:669:5: note: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:701:5: warning: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real x=-4.0; x < 4.0; x+=0.1) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:701:5: note: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:735:13: warning: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
            for (Real x=0.25; x < 10; x+=0.1) {
            ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:735:13: note: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter
/usr/include/boost/math/tools/toms748_solve.hpp:393:9: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
      e = d;
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:669:5: note: Loop condition is true.  Entering loop body
    for (Real x=-3.0; x < 3.0; x+=0.1) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:674:31: note: Calling 'InverseNonCentralChiSquared::operator()'
        const Real expected = invCDF(u);
                              ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/distributions.cpp:648:20: note: Calling 'quantile<double, boost::math::policies::policy<boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy>>'
            return boost::math::quantile(dist_, x);
                   ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:979:17: note: Calling 'nccs_quantile<double, boost::math::policies::policy<boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy>>'
         return detail::nccs_quantile(dist, p, false);
                ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:416:16: note: Left side of '||' is false
            if(!detail::check_df(
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:416:16: note: Left side of '||' is false
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:416:13: note: Taking false branch
            if(!detail::check_df(
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:435:16: note: Assuming 'p' is not equal to 0
            if(p == 0)
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:435:13: note: Taking false branch
            if(p == 0)
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:437:16: note: Assuming 'p' is not equal to 1
            if(p == 1)
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:437:13: note: Taking false branch
            if(p == 1)
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:452:16: note: 'comp' is false
            if(comp)
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:452:13: note: Taking false branch
            if(comp)
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:471:16: note: Assuming the condition is false
            if(guess < 0.005)
               ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:471:13: note: Taking false branch
            if(guess < 0.005)
            ^
/usr/include/boost/math/distributions/non_central_chi_squared.hpp:479:33: note: Calling 'generic_quantile<boost::math::non_central_chi_squared_distribution<long double, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy> >>'
            value_type result = detail::generic_quantile(
                                ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:60:7: note: Assuming 'p' is not equal to 0
   if(p == 0)
      ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:60:4: note: Taking false branch
   if(p == 0)
   ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:66:7: note: Assuming 'p' is not equal to 1
   if(p == 1)
      ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:66:4: note: Taking false branch
   if(p == 1)
   ^
/usr/include/boost/math/distributions/detail/generic_quantile.hpp:76:43: note: Calling 'bracket_and_solve_root<boost::math::detail::generic_quantile_finder<boost::math::non_central_chi_squared_distribution<long double, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy> > >, long double, boost::math::tools::eps_tolerance<long double>, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy>>'
   std::pair<value_type, value_type> ir = tools::bracket_and_solve_root(
                                          ^
/usr/include/boost/math/tools/toms748_solve.hpp:519:20: note: Assuming 'guess' is >= 0
   if((fa < 0) == (guess < 0 ? !rising : rising))
                   ^
/usr/include/boost/math/tools/toms748_solve.hpp:519:20: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:519:7: note: Assuming the condition is true
   if((fa < 0) == (guess < 0 ? !rising : rising))
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:519:4: note: Taking true branch
   if((fa < 0) == (guess < 0 ? !rising : rising))
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:525:7: note: Loop condition is false. Execution continues on line 592
      while((boost::math::sign)(fb) == (boost::math::sign)(fa))
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:596:8: note: Assuming 'a' is >= 0
      (a < 0 ? b : a), 
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:596:8: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:597:8: note: Assuming 'a' is >= 0
      (a < 0 ? a : b), 
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:597:8: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:598:8: note: Assuming 'a' is >= 0
      (a < 0 ? fb : fa), 
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:598:8: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:599:8: note: Assuming 'a' is >= 0
      (a < 0 ? fa : fb), 
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:599:8: note: '?' condition is false
/usr/include/boost/math/tools/toms748_solve.hpp:594:24: note: Calling 'toms748_solve<boost::math::detail::generic_quantile_finder<boost::math::non_central_chi_squared_distribution<long double, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy> > >, long double, boost::math::tools::eps_tolerance<long double>, boost::math::policies::policy<detail::forwarding_arg1, detail::forwarding_arg2, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy, boost::math::policies::default_policy>>'
   std::pair<T, T> r = toms748_solve(
                       ^
/usr/include/boost/math/tools/toms748_solve.hpp:308:8: note: 'max_iter' is not equal to 0
   if (max_iter == 0)
       ^
/usr/include/boost/math/tools/toms748_solve.hpp:308:4: note: Taking false branch
   if (max_iter == 0)
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:312:38: note: 'd' declared without an initial value
   T a, b, fa, fb, c, u, fu, a0, b0, d, fd, e, fe;
                                     ^
/usr/include/boost/math/tools/toms748_solve.hpp:318:7: note: Assuming 'a' is < 'b'
   if(a >= b)
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:318:4: note: Taking false branch
   if(a >= b)
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:7: note: Assuming the condition is false
   if(tol(a, b) || (fa == 0) || (fb == 0))
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:7: note: Left side of '||' is false
/usr/include/boost/math/tools/toms748_solve.hpp:325:21: note: Assuming 'fa' is not equal to 0
   if(tol(a, b) || (fa == 0) || (fb == 0))
                    ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:7: note: Left side of '||' is false
   if(tol(a, b) || (fa == 0) || (fb == 0))
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:34: note: Assuming 'fb' is not equal to 0
   if(tol(a, b) || (fa == 0) || (fb == 0))
                                 ^
/usr/include/boost/math/tools/toms748_solve.hpp:325:4: note: Taking false branch
   if(tol(a, b) || (fa == 0) || (fb == 0))
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:335:7: note: Assuming the condition is false
   if(boost::math::sign(fa) * boost::math::sign(fb) > 0)
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:335:4: note: Taking false branch
   if(boost::math::sign(fa) * boost::math::sign(fb) > 0)
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:342:7: note: Assuming 'fa' is equal to 0
   if(fa != 0)
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:342:4: note: Taking false branch
   if(fa != 0)
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:366:10: note: 'count' is 199
   while(count && (fa != 0) && !tol(a, b))
         ^
/usr/include/boost/math/tools/toms748_solve.hpp:366:10: note: Left side of '&&' is true
/usr/include/boost/math/tools/toms748_solve.hpp:366:20: note: Assuming 'fa' is not equal to 0
   while(count && (fa != 0) && !tol(a, b))
                   ^
/usr/include/boost/math/tools/toms748_solve.hpp:366:10: note: Left side of '&&' is true
   while(count && (fa != 0) && !tol(a, b))
         ^
/usr/include/boost/math/tools/toms748_solve.hpp:366:4: note: Loop condition is true.  Entering loop body
   while(count && (fa != 0) && !tol(a, b))
   ^
/usr/include/boost/math/tools/toms748_solve.hpp:380:20: note: Assuming the condition is true
      bool prof = (fabs(fa - fb) < min_diff) || (fabs(fa - fd) < min_diff) || (fabs(fa - fe) < min_diff) || (fabs(fb - fd) < min_diff) || (fabs(fb - fe) < min_diff) || (fabs(fd - fe) < min_diff);
                   ^
/usr/include/boost/math/tools/toms748_solve.hpp:380:46: note: Left side of '||' is true
      bool prof = (fabs(fa - fb) < min_diff) || (fabs(fa - fd) < min_diff) || (fabs(fa - fe) < min_diff) || (fabs(fb - fd) < min_diff) || (fabs(fb - fe) < min_diff) || (fabs(fd - fe) < min_diff);
                                             ^
/usr/include/boost/math/tools/toms748_solve.hpp:381:10: note: Assuming 'prof' is true
      if(prof)
         ^
/usr/include/boost/math/tools/toms748_solve.hpp:381:7: note: Taking true branch
      if(prof)
      ^
/usr/include/boost/math/tools/toms748_solve.hpp:393:9: note: Assigned value is garbage or undefined
      e = d;
        ^
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/everestoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/doublebinaryoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/extensibleoptions.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/doublebarrieroption.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/doublebarrieroption.cpp:115:12: warning: Excessive padding in 'struct (anonymous namespace)::DoubleBarrierFxOptionData' (8 padding bytes, where 0 is optimal). 
Optimal fields order: 
barrier1, 
barrier2, 
rebate, 
strike, 
s, 
q, 
r, 
t, 
vol25Put, 
volAtm, 
vol25Call, 
v, 
result, 
tol, 
barrierType, 
type, 
consider reordering the fields or adding explicit padding members [clang-analyzer-optin.performance.Padding]
    struct DoubleBarrierFxOptionData {
           ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/doublebarrieroption.cpp:115:12: note: Excessive padding in 'struct (anonymous namespace)::DoubleBarrierFxOptionData' (8 padding bytes, where 0 is optimal). Optimal fields order: barrier1, barrier2, rebate, strike, s, q, r, t, vol25Put, volAtm, vol25Call, v, result, tol, barrierType, type, consider reordering the fields or adding explicit padding members
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/fastfouriertransform.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/extendedtrees.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/digitalcoupon.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/exchangerate.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/fdcev.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/fittedbonddiscountcurve.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/forwardrateagreement.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/fdsabr.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdsabr.cpp:511:52: warning: The right operand of '-' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
            const Real diff = std::fabs(calculated - expected[i][j]);
                                                   ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdsabr.cpp:482:20: note: Assuming the condition is true
    for (Size i=0; i < f0s.size(); ++i) {
                   ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdsabr.cpp:482:5: note: Loop condition is true.  Entering loop body
    for (Size i=0; i < f0s.size(); ++i) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdsabr.cpp:497:24: note: Assuming the condition is false
        for (Size j=0; j < strikes.size(); ++j) {
                       ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdsabr.cpp:497:9: note: Loop condition is false. Execution continues on line 482
        for (Size j=0; j < strikes.size(); ++j) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdsabr.cpp:482:20: note: Assuming the condition is true
    for (Size i=0; i < f0s.size(); ++i) {
                   ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdsabr.cpp:482:5: note: Loop condition is true.  Entering loop body
    for (Size i=0; i < f0s.size(); ++i) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdsabr.cpp:497:24: note: Assuming the condition is false
        for (Size j=0; j < strikes.size(); ++j) {
                       ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdsabr.cpp:497:9: note: Loop condition is false. Execution continues on line 482
        for (Size j=0; j < strikes.size(); ++j) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdsabr.cpp:482:20: note: Assuming the condition is true
    for (Size i=0; i < f0s.size(); ++i) {
                   ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdsabr.cpp:482:5: note: Loop condition is true.  Entering loop body
    for (Size i=0; i < f0s.size(); ++i) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdsabr.cpp:497:14: note: 'j' initialized to 0
        for (Size j=0; j < strikes.size(); ++j) {
             ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdsabr.cpp:497:24: note: Assuming the condition is true
        for (Size j=0; j < strikes.size(); ++j) {
                       ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdsabr.cpp:497:9: note: Loop condition is true.  Entering loop body
        for (Size j=0; j < strikes.size(); ++j) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdsabr.cpp:511:52: note: The right operand of '-' is a garbage value
            const Real diff = std::fabs(calculated - expected[i][j]);
                                                   ^
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/digitaloption.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/digitaloption.cpp:59:12: warning: Excessive padding in 'struct (anonymous namespace)::DigitalOptionData' (11 padding bytes, where 3 is optimal). 
Optimal fields order: 
strike, 
s, 
q, 
r, 
t, 
v, 
result, 
tol, 
type, 
knockin, 
consider reordering the fields or adding explicit padding members [clang-analyzer-optin.performance.Padding]
    struct DigitalOptionData {
           ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/digitaloption.cpp:59:12: note: Excessive padding in 'struct (anonymous namespace)::DigitalOptionData' (11 padding bytes, where 3 is optimal). Optimal fields order: strike, s, q, r, t, v, result, tol, type, knockin, consider reordering the fields or adding explicit padding members
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/fdmlinearop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/garch.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/functions.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/gjrgarchmodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/gsr.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/himalayaoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/fdheston.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdheston.cpp:52:12: warning: Excessive padding in 'struct (anonymous namespace)::NewBarrierOptionData' (8 padding bytes, where 0 is optimal). 
Optimal fields order: 
barrier, 
rebate, 
strike, 
s, 
q, 
r, 
t, 
v, 
barrierType, 
type, 
consider reordering the fields or adding explicit padding members [clang-analyzer-optin.performance.Padding]
    struct NewBarrierOptionData {
           ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdheston.cpp:52:12: note: Excessive padding in 'struct (anonymous namespace)::NewBarrierOptionData' (8 padding bytes, where 0 is optimal). Optimal fields order: barrier, rebate, strike, s, q, r, t, v, barrierType, type, consider reordering the fields or adding explicit padding members
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdheston.cpp:877:9: warning: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (Real x = 99; x < 101.001; x += 0.1) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/fdheston.cpp:877:9: note: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/forwardoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/gaussianquadratures.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/inflationcapflooredcoupon.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/inflationcapfloor.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/inflationcpibond.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/dividendoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/hybridhestonhullwhiteprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/inflation.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/inflationcpicapfloor.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/instruments.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/inflationvolatility.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/interestrates.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/integrals.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/inflationcpiswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/lazyobject.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/linearleastsquaresregression.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/libormarketmodelprocess.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/libormarketmodel.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/libormarketmodel.cpp:157:5: warning: Variable 't' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real t=0; t<4.6; t+=0.31) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/libormarketmodel.cpp:157:5: note: Variable 't' with floating point type 'QuantLib::Real' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/hestonslvmodel.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonslvmodel.cpp:148:9: warning: Variable 't' with floating point type 'QuantLib::Time' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (Time t = dt; t <= maturity + 20 * QL_EPSILON; t += dt) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonslvmodel.cpp:148:9: note: Variable 't' with floating point type 'QuantLib::Time' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonslvmodel.cpp:429:5: warning: Variable 'sigma' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real sigma = 0.2; sigma < 2.01; sigma += 0.1) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonslvmodel.cpp:429:5: note: Variable 'sigma' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonslvmodel.cpp:503:5: warning: Variable 'sigma' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real sigma = 0.2; sigma < 2.01; sigma += 0.1) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonslvmodel.cpp:503:5: note: Variable 'sigma' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonslvmodel.cpp:591:5: warning: Variable 't' with floating point type 'QuantLib::Time' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Time t = (n + 1) * dt; t <= maturity + 20 * QL_EPSILON; t += dt) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonslvmodel.cpp:591:5: note: Variable 't' with floating point type 'QuantLib::Time' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/main.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/europeanoption.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/europeanoption.cpp:1710:5: warning: Variable 'theta' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real theta = 0.2; theta < 0.81; theta+=0.1) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/europeanoption.cpp:1710:5: note: Variable 'theta' with floating point type 'QuantLib::Real' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/lookbackoptions.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/jumpdiffusion.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/marketmodel_cms.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/margrabeoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/lowdiscrepancysequences.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/marketmodel_smmcapletalphacalibration.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/marketmodel_smm.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/marketmodel_smmcapletcalibration.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/mersennetwister.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/mclongstaffschwartzengine.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/marketmodel_smmcaplethomocalibration.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/noarbsabr.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/money.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/normalclvmodel.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/normalclvmodel.cpp:90:5: warning: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real x=10; x < 400; x+=10) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/normalclvmodel.cpp:90:5: note: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/normalclvmodel.cpp:143:5: warning: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real x=10; x < 400; x+=25) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/normalclvmodel.cpp:143:5: note: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/matrices.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/nthorderderivativeop.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/observable.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/numericaldifferentiation.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/numericaldifferentiation.cpp:212:5: warning: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real x=0.0; x < 5.0; x+=0.1) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/numericaldifferentiation.cpp:212:5: note: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/numericaldifferentiation.cpp:233:5: warning: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real x=0.0; x < 5.0; x+=0.1) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/numericaldifferentiation.cpp:233:5: note: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/numericaldifferentiation.cpp:250:5: warning: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real x=0.0; x < 5.0; x+=0.1) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/numericaldifferentiation.cpp:250:5: note: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/marketmodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/markovfunctional.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/nthtodefault.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/pagodaoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/operators.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/optimizers.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/period.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/ode.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/ode.cpp:158:5: warning: Variable 't' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real t=0.01; t < 11; t+=t) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/ode.cpp:158:5: note: Variable 't' with floating point type 'QuantLib::Real' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/partialtimebarrieroption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/pathgenerator.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/quantlibtestsuite.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/piecewisezerospreadedtermstructure.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:170:9: warning: Variable 'moneyness' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (Real moneyness = -1.0; moneyness < 2.0; moneyness += 1.0) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:170:9: note: Variable 'moneyness' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:187:5: warning: Variable 'sigma' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real sigma = 0.1; sigma < 0.7; sigma += 0.2) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:187:5: note: Variable 'sigma' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1363:5: warning: Variable 'strike' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real strike=40; strike < 190; strike+=20) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1363:5: note: Variable 'strike' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1388:5: warning: Variable 'strike' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real strike=40; strike < 190; strike+=10) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1388:5: note: Variable 'strike' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1513:30: warning: The right operand of '>' is a garbage value due to array index out of bounds [clang-analyzer-core.UndefinedBinaryOperatorResult]
                if (relError > tol[k]) {
                             ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1494:20: note: Assuming the condition is true
    for (Size i=0; i < strikes.size(); ++i) {
                   ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1494:5: note: Loop condition is true.  Entering loop body
    for (Size i=0; i < strikes.size(); ++i) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1497:24: note: Assuming the condition is true
        for (Size j=0; j < types.size(); ++j) {
                       ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1497:9: note: Loop condition is true.  Entering loop body
        for (Size j=0; j < types.size(); ++j) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1500:28: note: Assuming the condition is true
            for (Size k=0; k < engines.size(); ++k) {
                           ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1500:13: note: Loop condition is true.  Entering loop body
            for (Size k=0; k < engines.size(); ++k) {
            ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1513:21: note: Assuming the condition is false
                if (relError > tol[k]) {
                    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1513:17: note: Taking false branch
                if (relError > tol[k]) {
                ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1500:28: note: Assuming the condition is true
            for (Size k=0; k < engines.size(); ++k) {
                           ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1500:13: note: Loop condition is true.  Entering loop body
            for (Size k=0; k < engines.size(); ++k) {
            ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1513:21: note: Assuming the condition is false
                if (relError > tol[k]) {
                    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1513:17: note: Taking false branch
                if (relError > tol[k]) {
                ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1500:48: note: The value 2 is assigned to 'k'
            for (Size k=0; k < engines.size(); ++k) {
                                               ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1500:28: note: Assuming the condition is true
            for (Size k=0; k < engines.size(); ++k) {
                           ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1500:13: note: Loop condition is true.  Entering loop body
            for (Size k=0; k < engines.size(); ++k) {
            ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1513:30: note: The right operand of '>' is a garbage value due to array index out of bounds
                if (relError > tol[k]) {
                             ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1889:5: warning: Variable 't' with floating point type 'QuantLib::Time' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Time t=0.01; t < 41.0; t+=t) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:1889:5: note: Variable 't' with floating point type 'QuantLib::Time' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:2242:9: warning: Variable 'u' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (Real u =0.001; u < 10; u*=1.05) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:2242:9: note: Variable 'u' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:2364:5: warning: Variable 'r' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real r = 0.1; r < 4; r+=0.25) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:2364:5: note: Variable 'r' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:2365:9: warning: Variable 'phi' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (Real phi = 0; phi < 360; phi+=60) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:2365:9: note: Variable 'phi' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:2366:13: warning: Variable 't' with floating point type 'QuantLib::Time' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
            for (Time t=0.1; t <= 1.0; t+=0.3) {
            ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/hestonmodel.cpp:2366:13: note: Variable 't' with floating point type 'QuantLib::Time' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/quotes.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/overnightindexedswap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/rngtraits.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/rangeaccrual.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/riskneutraldensitycalculator.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/riskneutraldensitycalculator.cpp:321:5: warning: Variable 't' with floating point type 'QuantLib::Time' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Time t=0.1; t < 0.99; t+=0.015) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/riskneutraldensitycalculator.cpp:321:5: note: Variable 't' with floating point type 'QuantLib::Time' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/riskneutraldensitycalculator.cpp:330:9: warning: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (Real x = xm - 3*stdDev; x < xm + 3*stdDev; x+=0.05) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/riskneutraldensitycalculator.cpp:330:9: note: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/riskneutraldensitycalculator.cpp:497:9: warning: Variable 'v' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (Real v = 1e-5; v < 1.0; v+=(v < param.theta) ? 0.005 : 0.1) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/riskneutraldensitycalculator.cpp:497:9: note: Variable 'v' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/riskneutraldensitycalculator.cpp:553:9: warning: Variable 'q' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (Real q = 1e-5; q < 1.0; q+=0.001) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/riskneutraldensitycalculator.cpp:553:9: note: Variable 'q' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/riskneutraldensitycalculator.cpp:781:9: warning: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (Real x = 1.3; x < 3.1; x+=0.1) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/riskneutraldensitycalculator.cpp:781:9: note: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/optionletstripper.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/sampledcurve.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/rounding.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/riskstats.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/sofrfutures.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/schedule.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/spreadoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/stats.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/shortratemodels.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/swapforwardmappings.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/squarerootclvmodel.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/swap.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/piecewiseyieldcurve.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:146:9: warning: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (Real x = xMin; x < 0.0; x += 0.1) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:146:9: note: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:264:5: warning: Variable 'j' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real start = -1.9, j = 0; j < 2; start += 0.2, j++) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:264:5: note: Variable 'j' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:2057:5: warning: Variable 'k' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (; k < 1.004 * strike; k += 0.0001 * strike) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:2057:5: note: Variable 'k' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:2169:9: warning: Variable 'z' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (Real z = x[i] - 100 * QL_EPSILON; z < x[i] + 100 * QL_EPSILON; z += 2 * QL_EPSILON) {
        ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:2169:9: note: Variable 'z' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:2200:5: warning: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real x = -1.0; x <= 0.9; x += 0.01) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:2200:5: note: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:2233:5: warning: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real x = -1.0; x <= 1.0; x += 0.03) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/interpolations.cpp:2233:5: note: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/swaptionvolatilitymatrix.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/timegrid.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/timeseries.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/tqreigendecomposition.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/tracing.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/transformedgrid.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/swaptionvolatilitycube.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/swingoption.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/swingoption.cpp:162:5: warning: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (Real x=1e-12; x < 1.0; x*=10) {
    ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/swingoption.cpp:162:5: note: Variable 'x' with floating point type 'QuantLib::Real' should not be used as a loop counter
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/twoassetbarrieroption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/twoassetcorrelationoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/variancegamma.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/swaption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/utilities.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/varianceoption.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/volatilitymodels.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/zabr.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/varianceswaps.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/vpp.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/termstructures.cpp
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/quantooption.cpp
/home/zzy/Documents/Cpp/QuantLib/test-suite/quantooption.cpp:198:12: warning: Excessive padding in 'struct (anonymous namespace)::QuantoDoubleBarrierOptionData' (8 padding bytes, where 0 is optimal). 
Optimal fields order: 
barrier_lo, 
barrier_hi, 
rebate, 
s, 
strike, 
q, 
r, 
t, 
v, 
fxr, 
fxv, 
corr, 
result, 
tol, 
barrierType, 
type, 
consider reordering the fields or adding explicit padding members [clang-analyzer-optin.performance.Padding]
    struct QuantoDoubleBarrierOptionData {
           ^
/home/zzy/Documents/Cpp/QuantLib/test-suite/quantooption.cpp:198:12: note: Excessive padding in 'struct (anonymous namespace)::QuantoDoubleBarrierOptionData' (8 padding bytes, where 0 is optimal). Optimal fields order: barrier_lo, barrier_hi, rebate, s, strike, q, r, t, v, fxr, fxv, corr, result, tol, barrierType, type, consider reordering the fields or adding explicit padding members
clang-tidy -p=/home/zzy/Documents/Cpp/QuantLib /home/zzy/Documents/Cpp/QuantLib/test-suite/solvers.cpp
